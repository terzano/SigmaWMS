<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>NodaTime</name>
  </assembly>
  <members>
    <member name="T:NodaTime.AmbiguousTimeException">
      <summary>
            Exception thrown to indicate that the specified local time occurs twice
            in a particular time zone due to daylight saving time changes.    
            </summary>
    </member>
    <member name="M:NodaTime.AmbiguousTimeException.#ctor(NodaTime.LocalDateTime,NodaTime.DateTimeZone,NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Constructs an instance from the given information.
            </summary>
      <param name="localDateTime">The local date and time that was ambiguous</param>
      <param name="zone">The time zone in which the mapping is ambiguous</param>
      <param name="earlierMapping">The earlier possible mapping</param>
      <param name="laterMapping">The later possible mapping</param>
    </member>
    <member name="P:NodaTime.AmbiguousTimeException.EarlierMapping">
      <summary>
            The earlier of the two occurrences of the local date and time within the time zone.
            </summary>
    </member>
    <member name="P:NodaTime.AmbiguousTimeException.LaterMapping">
      <summary>
            The later of the two occurrences of the local date and time within the time zone.
            </summary>
    </member>
    <member name="P:NodaTime.AmbiguousTimeException.Zone">
      <summary>
            The time zone in which the local date and time is ambiguous.
            </summary>
    </member>
    <member name="T:NodaTime.CalendarSystem">
      <summary>
            A calendar system maps the non-calendar-specific "local time line" to human concepts
            such as years, months and days.
            </summary>
    </member>
    <member name="P:NodaTime.CalendarSystem.Eras">
      <summary>
            Returns a read-only list of eras for this calendar.
            </summary>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetAbsoluteYear(System.Int32,NodaTime.Calendars.Era)">
      <summary>
            Returns the "absolute year" (the one used throughout most of the API, without respect to eras)
            from a year-of-era and an era.
            </summary>
      <param name="yearOfEra">The year within the era.</param>
      <param name="era">The era in which to consider the year</param>
      <returns>The absolute year represented by the specified year of era.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="era" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="yearOfEra" /> is out of the range of years for the given era</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> is not an era of this calendar</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)">
      <summary>
            Returns a Coptic calendar system, which defines every fourth year as
            leap, much like the Julian calendar. The year is broken down into 12 months,
            each 30 days in length. An extra period at the end of the year is either 5
            or 6 days in length. In this implementation, it is considered a 13th month.
            </summary>
      <param name="minDaysInFirstWeek">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="minDaysInFirstWeek"/&gt; documentation for "M:NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)"]</p>
      </param>
      <returns>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)"]</p>
      </returns>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>
            Returns the number of days in the given month within the given year.
            </summary>
      <param name="year">The year in which to consider the month</param>
      <param name="month">The month to determine the number of days in</param>
      <returns>The number of days in the given month and year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The given year / month combination
            is invalid for this calendar.</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)">
      <summary>
            Returns a pure proleptic Gregorian calendar system, which defines every
            fourth year as leap, unless the year is divisible by 100 and not by 400.
            This improves upon the Julian calendar leap year rule.
            </summary>
      <param name="minDaysInFirstWeek">The minimum number of days in the first week of the year.
            When computing the WeekOfWeekYear and WeekYear properties of a particular date, this is
            used to decide at what point the week year changes.</param>
      <returns>A suitable Gregorian calendar reference; the same reference may be returned by several
            calls as the object is immutable and thread-safe.</returns>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern,NodaTime.Calendars.IslamicEpoch)">
      <summary>
            Returns an Islamic, or Hijri, calendar system.
            </summary>
      <param name="leapYearPattern">The pattern of years in the 30-year cycle to consider as leap years</param>
      <param name="epoch">The kind of epoch to use (astronomical or civil)</param>
      <returns>A suitable Islamic calendar reference; the same reference may be returned by several
            calls as the object is immutable and thread-safe.</returns>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)">
      <summary>
            Returns a pure proleptic Julian calendar system, which defines every
            fourth year as a leap year. This implementation follows the leap year rule
            strictly, even for dates before 8 CE, where leap years were actually
            irregular.
            </summary>
      <param name="minDaysInFirstWeek">The minimum number of days in the first week of the year.
            When computing the WeekOfWeekYear and WeekYear properties of a particular date, this is
            used to decide at what point the week year changes.</param>
      <returns>A suitable Julian calendar reference; the same reference may be returned by several
            calls as the object is immutable and thread-safe.</returns>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetMaxMonth(System.Int32)">
      <summary>
            The maximum valid month (inclusive) within this calendar in the given year. It is assumed that
            all calendars start with month 1 and go up to this month number in any valid year.
            </summary>
      <param name="year">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="year"/&gt; documentation for "M:NodaTime.CalendarSystem.GetMaxMonth(System.Int32)"]</p>
      </param>
      <returns>The maximum month number within the given year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The given year is invalid for this calendar.
            In some cases this may not be thrown whatever value you provide, for example if all years have
            the same months in this calendar. Failure to throw an exception should not be treated as an
            indication that the year is valid.</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetMaxYearOfEra(NodaTime.Calendars.Era)">
      <summary>
            Returns the maximum valid year in the given era.
            </summary>
      <param name="era">The era in which to find the greatest year</param>
      <returns>The maximum valid year in the given era.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="era" /> is null</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> is not an era of this calendar</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetMinYearOfEra(NodaTime.Calendars.Era)">
      <summary>
            Returns the minimum valid year in the given era.
            </summary>
      <param name="era">The era in which to find the greatest year</param>
      <returns>The minimum valid year in the given eraera.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="era" /> is null</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> is not an era of this calendar</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.IsLeapYear(System.Int32)">
      <summary>
            Returns whether or not the given year is a leap year in this calendar.
            </summary>
      <param name="year">The year to consider.</param>
      <returns>True if the given year is a leap year; false otherwise.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The given year is invalid for this calendar.
            In some cases this may not be thrown whatever value you provide, for example if all years have
            the same months in this calendar. Failure to throw an exception should not be treated as an
            indication that the year is valid.</exception>
    </member>
    <member name="P:NodaTime.CalendarSystem.Iso">
      <summary>
            Returns a calendar system that follows the rules of the ISO-8601 standard,
            which is compatible with Gregorian for all modern dates.
            </summary>
    </member>
    <member name="P:NodaTime.CalendarSystem.MaxYear">
      <summary>
            The maximum valid year (inclusive) within this calendar.
            </summary>
    </member>
    <member name="P:NodaTime.CalendarSystem.MinYear">
      <summary>
            The minimum valid year (inclusive) within this calendar.
            </summary>
    </member>
    <member name="P:NodaTime.CalendarSystem.Name">
      <summary>
            Gets the name of this calendar system. Each kind of calendar system has a unique name, although this
            does not necessarily provide enough information for round-tripping. (For example, the name of an
            Islamic calendar system does not indicate which kind of leap cycle it uses.)
            </summary>
    </member>
    <member name="M:NodaTime.CalendarSystem.ToString">
      <summary>
            Converts this calendar system to text by simply returning its name.
            </summary>
      <returns>The name of this calendar system.</returns>
    </member>
    <member name="P:NodaTime.CalendarSystem.UsesIsoDayOfWeek">
      <summary>
            Returns whether the day-of-week field refers to ISO days. If true, types such as <see cref="T:NodaTime.LocalDateTime" />
            can use the <see cref="T:NodaTime.IsoDayOfWeek" /> property to avoid using magic numbers.
            This defaults to true, but can be overridden by specific calendars.
            </summary>
    </member>
    <member name="T:NodaTime.DateTimeZone">
      <summary>
            Represents a time zone - a mapping between UTC and local time.
            </summary>
    </member>
    <member name="M:NodaTime.DateTimeZone.#ctor(System.String,System.Boolean,NodaTime.Offset,NodaTime.Offset)">
      <summary>
              Initializes a new instance of the <see cref="T:NodaTime.DateTimeZone" /> class.
            </summary>
      <param name="id">The unique id of this time zone.</param>
      <param name="isFixed">Set to <c>true</c> if this time zone has no transitions.</param>
      <param name="minOffset">Minimum offset applied within this zone</param>
      <param name="maxOffset">Maximum offset applied within this zone</param>
    </member>
    <member name="M:NodaTime.DateTimeZone.AtEarlier(NodaTime.LocalDateTime)">
      <summary>
            If the given local date/time is mapped unambiguously to a single ZonedDateTime value, that is returned.
            For ambiguous local date/time values, the earlier mapping is returned.
            For skipped local date/time values, SkippedTimeException is thrown.
            </summary>
      <param name="localDateTime">The local date and time to map in this time zone.</param>
      <returns>The <see cref="T:NodaTime.ZonedDateTime" /> value with the same local time as <paramref name="localDateTime" />,
            either unambiguously or the earlier of two ambiguous possibilities.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">The given LocalDateTime is skipped due to a transition where the clocks go forward</exception>
    </member>
    <member name="M:NodaTime.DateTimeZone.AtExactly(NodaTime.LocalDateTime)">
      <summary>
            If the given local date/time is mapped unambiguously to a single ZonedDateTime value, that is returned.
            For ambiguous or skipped local date/time values, AmbiguousTimeException or SkippedTimeException are thrown respectively.
            </summary>
      <param name="localDateTime">The local date and time to map in this time zone.</param>
      <returns>The unambiguous <see cref="T:NodaTime.ZonedDateTime" /> with the same local date and time as the given parameter in this time zone.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">The given LocalDateTime is skipped due to a transition where the clocks go forward</exception>
      <exception cref="T:NodaTime.AmbiguousTimeException">The given LocalDateTime is ambiguous due to a transition where the clocks go forward</exception>
    </member>
    <member name="M:NodaTime.DateTimeZone.AtLater(NodaTime.LocalDateTime)">
      <summary>
            If the given local date/time is mapped unambiguously to a single ZonedDateTime value, that is returned.
            For ambiguous local date/time values, the later mapping is returned.
            For skipped local date/time values, SkippedTimeException is thrown.
            </summary>
      <param name="localDateTime">The local date and time to map in this time zone.</param>
      <returns>The <see cref="T:NodaTime.ZonedDateTime" /> value with the same local time as <paramref name="localDateTime" />,
            either unambiguously or the earlier of two ambiguous possibilities.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">The given LocalDateTime is skipped due to a transition where the clocks go forward</exception>
    </member>
    <member name="M:NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)">
      <summary>
            Returns the ZonedDateTime with a LocalDateTime as early as possible on the given date.
            If midnight exists unambiguously on the given date, it is returned.
            If the given date has an ambiguous start time (e.g. the clocks go back from 1am to midnight)
            then the earlier ZonedDateTime is returned. If the given date has no midnight (e.g. the clocks
            go forward from midnight to 1am) then the earliest valid value is returned; this will be the instant
            of the transition.
            </summary>
      <param name="date">The local date to map in this time zone.</param>
      <returns>The <see cref="T:NodaTime.ZonedDateTime" /> representing the earliest time in the given date, in this time zone.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">The entire day was skipped due to a very large time zone transition.
            (This is extremely rare.)</exception>
    </member>
    <member name="F:NodaTime.DateTimeZone.DefaultDateTimeZoneProvider">
      <summary>
            Gets the default time zone provider, which is initialized from resources within the NodaTime assembly.
            </summary>
    </member>
    <member name="M:NodaTime.DateTimeZone.ForId(System.String)">
      <summary>
              Returns the time zone with the given id.
            </summary>
      <param name="id">The time zone id to find.</param>
      <returns>The <see cref="T:NodaTime.DateTimeZone" /> with the given id or <c>null</c> if there isn't one defined.</returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.GetOffsetFromUtc(NodaTime.Instant)">
      <summary>
            Returns the offset from UTC, where a positive duration indicates that local time is
            later than UTC. In other words, local time = UTC + offset.
            </summary>
      <param name="instant">The instant for which to calculate the offset.</param>
      <returns>
            The offset from UTC at the specified instant.
            </returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.GetSystemDefault">
      <summary>
            Gets the system default time zone, as mapped by the underlying provider.
            </summary>
      <returns>
            The provider-specific representation of the system time zone, or null if the time zone
            could not be mapped.
            </returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)">
      <summary>
              Gets the zone interval for the given instant. This will never return null.
            </summary>
      <param name="instant">The <see cref="T:NodaTime.Instant" /> to query.</param>
      <returns>The defined <see cref="T:NodaTime.TimeZones.ZoneInterval" />.</returns>
    </member>
    <member name="P:NodaTime.DateTimeZone.Id">
      <summary>
              The database ID for the time zone.
            </summary>
    </member>
    <member name="P:NodaTime.DateTimeZone.Ids">
      <summary>
            Gets the complete list of valid time zone ids provided by all of the registered
            providers. This list will be sorted in lexigraphical order by the id name.
            </summary>
    </member>
    <member name="P:NodaTime.DateTimeZone.IsFixed">
      <summary>
              Indicates whether the time zone is fixed, i.e. contains no transitions.
            </summary>
    </member>
    <member name="M:NodaTime.DateTimeZone.MapLocalDateTime(NodaTime.LocalDateTime)">
      <summary>
            Returns complete information about how the given LocalDateTime is mapped in this time zone.
            </summary>
      <param name="localDateTime">The local date and time to map in this time zone.</param>
      <returns>A mapping of the given local date and time to zero, one or two zoned date/time values.</returns>
    </member>
    <member name="P:NodaTime.DateTimeZone.MaxOffset">
      <summary>
            Returns the greatest offset within this time zone.
            </summary>
    </member>
    <member name="P:NodaTime.DateTimeZone.MinOffset">
      <summary>
            Returns the least offset within this time zone.
            </summary>
    </member>
    <member name="P:NodaTime.DateTimeZone.ProviderVersionId">
      <summary>
            Returns a version identifier for the time zone provider.
            </summary>
    </member>
    <member name="M:NodaTime.DateTimeZone.SetProvider(NodaTime.TimeZones.IDateTimeZoneProvider)">
      <summary>
            Sets the provider to use for time zone lookup. Note that this is a global change; it is expected
            that users will only call this on start-up if at all.
            </summary>
      <param name="provider">The provider to use for time zones.</param>
    </member>
    <member name="M:NodaTime.DateTimeZone.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:NodaTime.DateTimeZone.Utc">
      <summary>
              Gets the UTC (Coordinated Universal Time) time zone.
            </summary>
    </member>
    <member name="F:NodaTime.DateTimeZone.UtcId">
      <summary>
            The ID of the UTC (Coordinated Universal Time) time zone.
            </summary>
    </member>
    <member name="T:NodaTime.Duration">
      <summary>
            A length of time in ticks. (There are 10,000 ticks in a millisecond.) A duration represents
            a fixed length of time, with no concept of calendars.
            </summary>
    </member>
    <member name="M:NodaTime.Duration.#ctor(NodaTime.Instant,NodaTime.Instant)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Duration" /> struct as the difference
            betweeen the given <see cref="T:NodaTime.Instant" /> values. This is effectively <c>new
            Duration(end.Ticks - start.Ticks)</c>.
            </summary>
      <param name="start">The start <see cref="T:NodaTime.Instant" /> value.</param>
      <param name="end">The end <see cref="T:NodaTime.Instant" /> value.</param>
    </member>
    <member name="M:NodaTime.Duration.#ctor(NodaTime.Interval)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Duration" /> struct as the duration of the
            given <see cref="T:NodaTime.Interval" /> object.
            </summary>
      <param name="interval">The interval.</param>
    </member>
    <member name="M:NodaTime.Duration.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Duration" /> struct.
            </summary>
      <param name="ticks">The number of ticks.</param>
    </member>
    <member name="M:NodaTime.Duration.#ctor(System.Int64,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Duration" /> struct as the difference
            betweeen the given ticks. This is effectively <c>new Duration(end - start)</c>.
            </summary>
      <param name="startTicks">The start ticks.</param>
      <param name="endTicks">The end ticks.</param>
    </member>
    <member name="M:NodaTime.Duration.Add(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Adds one duration to another. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the sum of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.CompareTo(NodaTime.Duration)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>&lt; 0</term><description>This object is less than the <paramref name="other" /> parameter.</description></item><item><term>0</term><description>This object is equal to <paramref name="other" />.</description></item><item><term>&gt; 0</term><description>This object is greater than <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:NodaTime.Duration.Divide(NodaTime.Duration,System.Int64)">
      <summary>
            Divides a duration by a number. Friendly alternative to <c>operator/()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the quotient of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.Equals(NodaTime.Duration)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.Duration.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.Duration.FromHours(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of hours.
            </summary>
      <param name="hours">The number of hours.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> number of hours.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromMilliseconds(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of milliseconds.
            </summary>
      <param name="milliseconds">The number of milliseconds.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> number of milliseconds.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromMinutes(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of minutes.
            </summary>
      <param name="minutes">The number of minutes.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> number of minutes.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromSeconds(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of seconds.
            </summary>
      <param name="seconds">The number of seconds.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> number of seconds.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromStandardDays(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of standard days made
            up from 24 hours.
            </summary>
      <param name="days">The number of days.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> number of days.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromStandardWeeks(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of standard weeks made
            up from 7 24-hour days.
            </summary>
      <param name="weeks">The number of weeks.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> number of weeks.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromTicks(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of ticks.
            </summary>
      <param name="ticks">The number of ticks.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> number of ticks.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromTimeSpan(System.TimeSpan)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the same number of ticks as the
            given <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="timeSpan">The TimeSpan value to convert</param>
      <returns>A new Duration with the same number of ticks as the given TimeSpan.</returns>
    </member>
    <member name="M:NodaTime.Duration.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
    </member>
    <member name="P:NodaTime.Duration.HoursRemainder">
      <summary>
            The number of hours within an day in this duration, in the range [-23, 23].
            </summary>
    </member>
    <member name="F:NodaTime.Duration.MaxValue">
      <summary>
            Represents the maximum <see cref="T:NodaTime.Duration" /> value. 
            This field is read-only.
            </summary>
    </member>
    <member name="P:NodaTime.Duration.MillisecondsRemainder">
      <summary>
            The number of milliseconds within a second in this duration, in the range [-999, 999].
            </summary>
    </member>
    <member name="M:NodaTime.Duration.Minus(NodaTime.Duration)">
      <summary>
            Returns the result of subtracting another duration from this one, for a fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="other">The duration to subtract</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the result of the subtraction.</returns>
    </member>
    <member name="P:NodaTime.Duration.MinutesRemainder">
      <summary>
            The number of minutes within an hour in this duration, in the range [-59, 59].
            </summary>
    </member>
    <member name="F:NodaTime.Duration.MinValue">
      <summary>
            Represents the mimimum <see cref="T:NodaTime.Duration" /> value. 
            This field is read-only.
            </summary>
    </member>
    <member name="M:NodaTime.Duration.Multiply(NodaTime.Duration,System.Int64)">
      <summary>
            Multiplies a duration by a number. Friendly alternative to <c>operator*()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the product of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.Multiply(System.Int64,NodaTime.Duration)">
      <summary>
            Multiplies a duration by a number. Friendly alternative to <c>operator*()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the product of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.Negate(NodaTime.Duration)">
      <summary>
            Implements a friendly alternative to the unary negation operator.
            </summary>
      <param name="duration">Duration to negate</param>
      <returns>The negative value of this duration</returns>
    </member>
    <member name="F:NodaTime.Duration.NegativeOne">
      <summary>
            Represents <see cref="T:NodaTime.Duration" /> value equal to negative 1 tick. 
            This field is read-only.
            </summary>
    </member>
    <member name="F:NodaTime.Duration.One">
      <summary>
            Represents the <see cref="T:NodaTime.Duration" /> value equals to 1 tick. 
            This field is read-only.
            </summary>
    </member>
    <member name="F:NodaTime.Duration.OneDay">
      <summary>
            Represents the <see cref="T:NodaTime.Duration" /> value equals to number of ticks in 1 day.
            This field is constant.
            </summary>
    </member>
    <member name="F:NodaTime.Duration.OneHour">
      <summary>
            Represents the <see cref="T:NodaTime.Duration" /> value equals to number of ticks in 1 hour.
            This field is constant.
            </summary>
    </member>
    <member name="F:NodaTime.Duration.OneMillisecond">
      <summary>
            Represents the <see cref="T:NodaTime.Duration" /> value equals to number of ticks in 1 millisecond.
            This field is constant.
            </summary>
    </member>
    <member name="F:NodaTime.Duration.OneMinute">
      <summary>
            Represents the <see cref="T:NodaTime.Duration" /> value equals to number of ticks in 1 minute.
            This field is constant.
            </summary>
    </member>
    <member name="F:NodaTime.Duration.OneSecond">
      <summary>
            Represents the <see cref="T:NodaTime.Duration" /> value equals to number of ticks in 1 second.
            This field is constant.
            </summary>
    </member>
    <member name="F:NodaTime.Duration.OneWeek">
      <summary>
            Represents the <see cref="T:NodaTime.Duration" /> value equals to number of ticks in 1 week.
            This field is constant.
            </summary>
    </member>
    <member name="M:NodaTime.Duration.op_Addition(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator + (addition).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the sum of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Division(NodaTime.Duration,System.Int64)">
      <summary>
            Implements the operator / (division).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the duration divided by the scale.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Equality(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator == (equality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator &gt; (greater than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator &gt;= (greater than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Inequality(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator != (inequality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are not equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_LessThan(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator &lt; (less than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator &lt;= (less than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Int64)">
      <summary>
            Implements the operator * (multiplication).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the duration multiplied by the scale.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Multiply(System.Int64,NodaTime.Duration)">
      <summary>
            Implements the operator * (multiplication).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the duration multiplied by the scale.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Subtraction(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator - (subtraction).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the difference of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_UnaryNegation(NodaTime.Duration)">
      <summary>
            Implements the unary negation operator.
            </summary>
      <param name="duration">Duration to negate</param>
      <returns>The negative value of this duration</returns>
    </member>
    <member name="M:NodaTime.Duration.Plus(NodaTime.Duration)">
      <summary>
            Returns the result of adding another duration to this one, for a fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="other">The duration to add</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the result of the addition.</returns>
    </member>
    <member name="P:NodaTime.Duration.SecondsRemainder">
      <summary>
            The number of seconds within a minute in this duration, in the range [-59, 59].
            </summary>
    </member>
    <member name="P:NodaTime.Duration.StandardDays">
      <summary>
            The total number of standard (24 hour) days in this duration (so a day and a half would return 36).
            </summary>
    </member>
    <member name="M:NodaTime.Duration.Subtract(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Subtracts one duration from another. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the difference of the given values.</returns>
    </member>
    <member name="P:NodaTime.Duration.Ticks">
      <summary>
            The total number of ticks in the duration.
            </summary>
    </member>
    <member name="P:NodaTime.Duration.TicksRemainder">
      <summary>
            The number of ticks within a millisecond in this duration, in the range [-9999, 9999].
            </summary>
    </member>
    <member name="M:NodaTime.Duration.ToString">
      <summary>
            Gets the value as a <see cref="T:System.String" /> showing the number of ticks represented by this duration.
            </summary>
      <returns>A string representation of this duration.</returns>
    </member>
    <member name="P:NodaTime.Duration.TotalHours">
      <summary>
            The total number of hours in this duration (so a day and a half would return 36).
            </summary>
    </member>
    <member name="P:NodaTime.Duration.TotalMilliseconds">
      <summary>
            The total number of milliseconds in this duration (so a second and a half would return 1500).
            </summary>
    </member>
    <member name="P:NodaTime.Duration.TotalMinutes">
      <summary>
            The total number of minutes in this duration (so an hour and a half would return 90).
            </summary>
    </member>
    <member name="P:NodaTime.Duration.TotalSeconds">
      <summary>
            The total number of seconds in this duration (so a minute and a half would return 90).
            </summary>
    </member>
    <member name="M:NodaTime.Duration.ToTimeSpan">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents the same number of ticks as thi
            <see cref="T:NodaTime.Duration" />.
            </summary>
      <returns>A new TimeSpan with the same number of ticks as this Duration.</returns>
    </member>
    <member name="F:NodaTime.Duration.Zero">
      <summary>
            Represents the zero <see cref="T:NodaTime.Duration" /> value. 
            This field is read-only.
            </summary>
    </member>
    <member name="T:NodaTime.IClock">
      <summary>
            Represents a clock which can tell the current time as an <see cref="T:NodaTime.Instant" />.
            </summary>
    </member>
    <member name="P:NodaTime.IClock.Now">
      <summary>
            Gets the current instant in time according to this clock. This is an instant on
            the time line which is independent of both time zone and calendar system.
            </summary>
    </member>
    <member name="T:NodaTime.Instant">
      <summary>
              Represents an instant on the timeline, measured in ticks from the Unix epoch,
              which is typically described as January 1st 1970, midnight, UTC (ISO calendar).
              (There are 10,000 ticks in a millisecond.)
            </summary>
    </member>
    <member name="M:NodaTime.Instant.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Instant" /> struct.
            </summary>
      <param name="ticks">The ticks from the unix epoch.</param>
    </member>
    <member name="M:NodaTime.Instant.Add(NodaTime.Instant,NodaTime.Duration)">
      <summary>
            Adds a duration to an instant. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the sum of the given values.</returns>
    </member>
    <member name="F:NodaTime.Instant.BeginningOfTimeLabel">
      <summary>
            String used to represent "the beginning of time" (as far as Noda Time is concerned).
            </summary>
    </member>
    <member name="M:NodaTime.Instant.CompareTo(NodaTime.Instant)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
              A 32-bit signed integer that indicates the relative order of the objects being compared.
              The return value has the following meanings:
              <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>&lt; 0</term><description>This object is less than the <paramref name="other" /> parameter.</description></item><item><term>0</term><description>This object is equal to <paramref name="other" />.</description></item><item><term>&gt; 0</term><description>This object is greater than <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="F:NodaTime.Instant.EndOfTimeLabel">
      <summary>
            String used to represent "the end of time" (as far as Noda Time is concerned).
            </summary>
    </member>
    <member name="M:NodaTime.Instant.Equals(NodaTime.Instant)">
      <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
              true if the current object is equal to the <paramref name="other" /> parameter;
              otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.Instant.Equals(System.Object)">
      <summary>
              Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
              otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.Instant.FromDateTimeUtc(System.DateTime)">
      <summary>
            Converts a <see cref="T:System.DateTime" /> into a new Instant representing the same instant in time.
            </summary>
      <param name="dateTime">Date and time value which must have a <see cref="P:System.DateTime.Kind" /> of <see cref="F:System.DateTimeKind.Utc" /></param>
      <returns>An <see cref="T:NodaTime.Instant" /> value representing the same instant in time as the given universal <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> has the wrong <see cref="P:System.DateTime.Kind" />.</exception>
    </member>
    <member name="M:NodaTime.Instant.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns a new instant corresponding to the given UTC date and time in the ISO calendar.
            In most cases applications should use <see cref="T:NodaTime.ZonedDateTime" /> to represent a date
            and time, but this method is useful in some situations where an <see cref="T:NodaTime.Instant" /> is
            required, such as time zone testing.
            </summary>
      <param name="year">Year of the instant to return.</param>
      <param name="monthOfYear">Month of year of the instant to return.</param>
      <param name="dayOfMonth">Day of month of the instant to return.</param>
      <param name="hourOfDay">Hour of day of the instant to return.</param>
      <param name="minuteOfHour">Minute of hour of the instant to return.</param>
      <returns>The instant representing the given date and time in UTC and the ISO calendar.</returns>
    </member>
    <member name="M:NodaTime.Instant.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns a new instant corresponding to the given UTC date and
            time in the ISO calendar. In most cases applications should 
            use <see cref="T:NodaTime.ZonedDateTime" />
            to represent a date and time, but this method is useful in some 
            situations where an Instant is required, such as time zone testing.
            </summary>
      <param name="year">Year of the instant to return.</param>
      <param name="monthOfYear">Month of year of the instant to return.</param>
      <param name="dayOfMonth">Day of month of the instant to return.</param>
      <param name="hourOfDay">Hour of day of the instant to return.</param>
      <param name="minuteOfHour">Minute of hour of the instant to return.</param>
      <param name="secondOfMinute">Second of minute of the instant to return.</param>
      <returns>The instant representing the given date and time in UTC and the ISO calendar.</returns>
    </member>
    <member name="M:NodaTime.Instant.GetHashCode">
      <summary>
              Returns a hash code for this instance.
            </summary>
      <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data
              structures like a hash table. 
            </returns>
    </member>
    <member name="M:NodaTime.Instant.InIsoUtc">
      <summary>
            Returns the representation of this instant in the UTC time zone, in the ISO-8601 calendar.
            This is a shortcut for calling InZone with an argument of DateTimeZone.Utc.
            </summary>
      <returns>A <see cref="T:NodaTime.ZonedDateTime" /> for the same instant, in the UTC time zone
            and the ISO-8601 calendar</returns>
    </member>
    <member name="M:NodaTime.Instant.InZone(NodaTime.DateTimeZone)">
      <summary>
            Returns the representation of this instant in the specified time zone, in the ISO-8601 calendar.
            </summary>
      <param name="zone">The time zone in which to represent this instant. Must not be null.</param>
      <returns>A <see cref="T:NodaTime.ZonedDateTime" /> for the same instant, in the given time zone
            and the ISO-8601 calendar</returns>
    </member>
    <member name="M:NodaTime.Instant.InZone(NodaTime.DateTimeZone,NodaTime.CalendarSystem)">
      <summary>
            Returns the representation of this instant in the specified time zone and calendar system.
            </summary>
      <param name="zone">The time zone in which to represent this instant. Must not be null.</param>
      <param name="calendar">The calendar system in which to represent this instant. Must not be null.</param>
      <returns>A <see cref="T:NodaTime.ZonedDateTime" /> for the same instant, in the given time zone
            and calendar</returns>
    </member>
    <member name="M:NodaTime.Instant.Max(NodaTime.Instant,NodaTime.Instant)">
      <summary>
            Returns the later instant of the given two.
            </summary>
      <param name="x">The first instant to compare.</param>
      <param name="y">The second instant to compare.</param>
      <returns>The later instant of <paramref name="x" /> or <paramref name="y" />.</returns>
    </member>
    <member name="F:NodaTime.Instant.MaxValue">
      <summary>
            The maximum instant value, which is also used to represent the end of time.
            </summary>
    </member>
    <member name="M:NodaTime.Instant.Min(NodaTime.Instant,NodaTime.Instant)">
      <summary>
            Returns the earlier instant of the given two.
            </summary>
      <param name="x">The first instant to compare.</param>
      <param name="y">The second instant to compare.</param>
      <returns>The earlier instant of <paramref name="x" /> or <paramref name="y" />.</returns>
    </member>
    <member name="M:NodaTime.Instant.Minus(NodaTime.Duration)">
      <summary>
            Returns the result of subtracting a duration from this instant, for a fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="duration">The duration to subtract</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the result of the subtraction.</returns>
    </member>
    <member name="M:NodaTime.Instant.Minus(NodaTime.Instant)">
      <summary>
            Returns the result of subtracting another instant from this one, for a fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="other">The other instant to subtract</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the result of the subtraction.</returns>
    </member>
    <member name="F:NodaTime.Instant.MinValue">
      <summary>
            The minimum instant value, which is also used to represent the beginning of time.
            </summary>
    </member>
    <member name="M:NodaTime.Instant.op_Addition(NodaTime.Instant,NodaTime.Duration)">
      <summary>
            Implements the operator + (addition) for <see cref="T:NodaTime.Instant" /> + <see cref="T:NodaTime.Duration" />.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the sum of the given values.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_Equality(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator == (equality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_GreaterThan(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator &gt; (greater than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_GreaterThanOrEqual(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator &gt;= (greater than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_Inequality(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator != (inequality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are not equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_LessThan(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator &lt; (less than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_LessThanOrEqual(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator &lt;= (less than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_Subtraction(NodaTime.Instant,NodaTime.Duration)">
      <summary>
            Implements the operator - (subtraction) for <see cref="T:NodaTime.Instant" /> - <see cref="T:NodaTime.Duration" />.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the sum of the given values.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_Subtraction(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator - (subtraction) for <see cref="T:NodaTime.Instant" /> - <see cref="T:NodaTime.Instant" />.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the sum of the given values.</returns>
    </member>
    <member name="M:NodaTime.Instant.Parse(System.String)">
      <summary>
            Parses the given string using the current culture's default format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <returns>The parsed instant.</returns>
    </member>
    <member name="M:NodaTime.Instant.Parse(System.String,System.IFormatProvider)">
      <summary>
            Parses the given string using the specified format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed instant.</returns>
    </member>
    <member name="M:NodaTime.Instant.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>
            Parses the given string using the specified pattern and format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patternText">The text of the pattern to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed instant.</returns>
    </member>
    <member name="M:NodaTime.Instant.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>
            Parses the given string using the specified patterns and format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patterns">The patterns to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed instant.</returns>
    </member>
    <member name="M:NodaTime.Instant.Plus(NodaTime.Duration)">
      <summary>
            Returns the result of adding a duration to this instant, for a fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="duration">The duration to add</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the result of the addition.</returns>
    </member>
    <member name="M:NodaTime.Instant.Subtract(NodaTime.Instant,NodaTime.Duration)">
      <summary>
            Subtracts a duration from an instant. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the difference of the given values.</returns>
    </member>
    <member name="M:NodaTime.Instant.Subtract(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Subtracts one instant from another. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the difference of the given values.</returns>
    </member>
    <member name="P:NodaTime.Instant.Ticks">
      <summary>
            Ticks since the Unix epoch.
            </summary>
    </member>
    <member name="M:NodaTime.Instant.ToDateTimeOffset">
      <summary>
            Constructs a <see cref="T:System.DateTimeOffset" /> from this Instant which has an offset of zero.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> representing the same instant in time as this value.</returns>
    </member>
    <member name="M:NodaTime.Instant.ToDateTimeUtc">
      <summary>
            Constructs a <see cref="T:System.DateTime" /> from this Instant which has a <see cref="P:System.DateTime.Kind" />
            of <see cref="F:System.DateTimeKind.Utc" /> and represents the same instant of time as this value.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> representing the same instant in time as this value, with a kind of "universal".</returns>
    </member>
    <member name="M:NodaTime.Instant.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance. Equivalent to
              calling <c>ToString(null)</c>.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:NodaTime.Instant.ToString(System.IFormatProvider)">
      <summary>
              Formats the value of the current instance using the specified <see cref="T:System.IFormatProvider" />.
            </summary>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.
              -or- 
              null to obtain the format information from the current locale setting of the current thread. 
            </param>
      <returns>
              A <see cref="T:System.String" /> containing the value of the current instance.
            </returns>
    </member>
    <member name="M:NodaTime.Instant.ToString(System.String)">
      <summary>
              Formats the value of the current instance using the specified format.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use.
              -or- 
              null to use the default pattern defined for the type. 
            </param>
      <returns>
              A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="M:NodaTime.Instant.ToString(System.String,System.IFormatProvider)">
      <summary>
              Formats the value of the current instance using the specified format.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use.
              -or- 
              null to use the default pattern defined for the type of the <see cref="T:System.IFormattable" /> implementation. 
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.
              -or- 
              null to obtain the numeric format information from the current locale setting of the operating system. 
            </param>
      <returns>
              A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="M:NodaTime.Instant.TryParse(System.String,NodaTime.Instant@)">
      <summary>
            Attempts to parse the given string using the current culture's default format provider. If the parse is successful,
            the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Instant.MinValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="result">The parsed instant, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.Instant.TryParse(System.String,System.IFormatProvider,NodaTime.Instant@)">
      <summary>
            Attempts to parse the given string using the specified format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Instant.MinValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed instant, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.Instant.TryParseExact(System.String,System.String,System.IFormatProvider,NodaTime.Instant@)">
      <summary>
            Attempts to parse the given string using the specified pattern and format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Instant.MinValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patternText">The text of the pattern to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed instant, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.Instant.TryParseExact(System.String,System.String[],System.IFormatProvider,NodaTime.Instant@)">
      <summary>
            Attempts to parse the given string using the specified patterns and format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Instant.MinValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patterns">The patterns to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed instant, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="F:NodaTime.Instant.UnixEpoch">
      <summary>
            The instant at the Unix epoch of midnight 1st January 1970 UTC.
            </summary>
    </member>
    <member name="T:NodaTime.Interval">
      <summary>
            An interval between two instants in time.
            </summary>
    </member>
    <member name="M:NodaTime.Interval.#ctor(NodaTime.Instant,NodaTime.Instant)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Interval" /> struct. The <see cref="T:NodaTime.Interval" /> includes the <paramref name="start" /> instant and excludes the
            <paramref name="end" /> instant. The end may equal the start, but must not be before the start.
            </summary>
      <param name="start">The start <see cref="T:NodaTime.Instant" />.</param>
      <param name="end">The end <see cref="T:NodaTime.Instant" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="end" /> is earlier than <paramref name="start" />.</exception>
    </member>
    <member name="P:NodaTime.Interval.Duration">
      <summary>
            Gets the duration.
            </summary>
    </member>
    <member name="P:NodaTime.Interval.End">
      <summary>
            Gets the end instant.
            </summary>
    </member>
    <member name="M:NodaTime.Interval.Equals(NodaTime.Interval)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.Interval.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to. 
                            </param>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.Interval.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:NodaTime.Interval.op_Equality(NodaTime.Interval,NodaTime.Interval)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:NodaTime.Interval.op_Inequality(NodaTime.Interval,NodaTime.Interval)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="P:NodaTime.Interval.Start">
      <summary>
            Gets the start instant.
            </summary>
    </member>
    <member name="T:NodaTime.IsoDayOfWeek">
      <summary>
            Equates the days of the week with their numerical value according to
            ISO-8601. This corresponds with System.DayOfWeek except for Sunday, which
            is 7 in the ISO numbering and 0 in System.DayOfWeek.
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.None">
      <summary>
            Value indicating no day of the week; this will never be returned
            by any IsoDayOfWeek property, and is not valid as an argument to
            any method.
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Monday">
      <summary>
            Value representing Monday (1).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Tuesday">
      <summary>
            Value representing Tuesday (2).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Wednesday">
      <summary>
            Value representing Wednesday (3).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Thursday">
      <summary>
            Value representing Thursday (4).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Friday">
      <summary>
            Value representing Friday (5).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Saturday">
      <summary>
            Value representing Saturday (6).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Sunday">
      <summary>
            Value representing Sunday (7).
            </summary>
    </member>
    <member name="T:NodaTime.LocalDate">
      <summary>
            LocalDate is an immutable struct representing a date within the calendar,
            with no reference to a particular time zone or time of day.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructs an instance for the given era, year of era, month and day in the ISO calendar.
            </summary>
      <param name="era">The era within which to create a date. Must be a valid era within the ISO calendar.</param>
      <param name="yearOfEra">Year of the new date/</param>
      <param name="month">Month of year of the new date/</param>
      <param name="day">Day of month of the new date/</param>
      <returns>The resulting date.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date</exception>
    </member>
    <member name="M:NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Constructs an instance for the given era, year of era, month and day in the specified calendar.
            </summary>
      <param name="era">The era within which to create a date. Must be a valid era within the specified calendar.</param>
      <param name="yearOfEra">Year of the new date/</param>
      <param name="month">Month of year of the new date/</param>
      <param name="day">Day of month of the new date/</param>
      <param name="calendar">Calendar system in which to create the date</param>
      <returns>The resulting date.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date</exception>
      <exception cref="T:System.ArgumentNullException">If <paramref name="calendar" /> is <c>null</c>.</exception>
    </member>
    <member name="M:NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructs an instance for the given year, month and day in the ISO calendar.
            </summary>
      <param name="year">Year of the new date. This is the "absolute year", so a value of 0 means 1BC, for example.</param>
      <param name="month">Month of year of the new date/</param>
      <param name="day">Day of month of the new date/</param>
      <returns>The resulting date.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date</exception>
    </member>
    <member name="M:NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Constructs an instance for the given year, month and day in the specified calendar.
            </summary>
      <param name="year">Year of the new date. This is the "absolute year", so a value of 0 means 1BC, for example.</param>
      <param name="month">Month of year of the new date/</param>
      <param name="day">Day of month of the new date/</param>
      <param name="calendar">Calendar system in which to create the date</param>
      <returns>The resulting date.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date</exception>
      <exception cref="T:System.ArgumentNullException">If <paramref name="calendar" /> is <c>null</c>.</exception>
    </member>
    <member name="M:NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)">
      <summary>
            Adds the specified period to the date. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="date">The date to add the period to</param>
      <param name="period">The period to add. Must not contain any (non-zero) time units.</param>
      <returns>The sum of the given date and period</returns>
    </member>
    <member name="P:NodaTime.LocalDate.Calendar">
      <summary>Gets the calendar system associated with this local date.</summary>
    </member>
    <member name="P:NodaTime.LocalDate.DayOfMonth">
      <summary>Gets the day of this local date within the month.</summary>
    </member>
    <member name="P:NodaTime.LocalDate.DayOfWeek">
      <summary>
            Week day of this local date as a number.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDate.DayOfYear">
      <summary>Gets the day of this local date within the year.</summary>
    </member>
    <member name="M:NodaTime.LocalDate.Equals(NodaTime.LocalDate)">
      <summary>
            Compares two <see cref="T:NodaTime.LocalDate" /> values for equality. This requires
            that the dates be the same, within the same calendar.
            </summary>
      <param name="other">The value to compare this date with.</param>
      <returns>True if the given value is another local date equal to this one; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:NodaTime.LocalDate" /> values for equality. This requires
            that the dates be the same, within the same calendar.
            </summary>
      <param name="obj">The object to compare this date with.</param>
      <returns>True if the given value is another local date equal to this one; false otherwise.</returns>
    </member>
    <member name="P:NodaTime.LocalDate.Era">
      <summary>Gets the era of this local date.</summary>
    </member>
    <member name="M:NodaTime.LocalDate.GetHashCode">
      <summary>
            Returns a hash code for this local date.
            </summary>
      <returns>A hash code for this local date.</returns>
    </member>
    <member name="P:NodaTime.LocalDate.IsoDayOfWeek">
      <summary>
            Week day of this local date expressed as an <see cref="T:NodaTime.IsoDayOfWeek" /> value,
            for calendars which use ISO days of the week.
            </summary>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
    </member>
    <member name="P:NodaTime.LocalDate.LocalDateTime">
      <summary>
            Gets a <see cref="P:NodaTime.LocalDate.LocalDateTime" /> at midnight on the date represented by this local date, in the same calendar system.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDate.Minus(NodaTime.Period)">
      <summary>
            Subtracts the specified period from this date. Fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="period">The period to subtract. Must not contain any (non-zero) time units.</param>
      <returns>The result of subtracting the given period from this date.</returns>
    </member>
    <member name="P:NodaTime.LocalDate.MonthOfYear">
      <summary>Gets the month of this local date within the year.</summary>
    </member>
    <member name="M:NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)">
      <summary>
            Returns the next <see cref="T:NodaTime.LocalDate" /> falling on the specified <see cref="P:NodaTime.LocalDate.IsoDayOfWeek" />.
            This is a strict "next" - if this date on already falls on the target
            day of the week, the returned value will be a week later.
            </summary>
      <param name="targetDayOfWeek">The ISO day of the week to return the next date of.</param>
      <returns>The next <see cref="T:NodaTime.LocalDate" /> falling on the specified day of the week.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetDayOfWeek" /> is not a valid day of the
            week (Monday to Sunday).</exception>
    </member>
    <member name="M:NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)">
      <summary>
            Combines the given <see cref="T:NodaTime.LocalDate" /> and <see cref="T:NodaTime.LocalTime" /> components
            into a single <see cref="P:NodaTime.LocalDate.LocalDateTime" />.
            </summary>
      <param name="date">The date to add the time to</param>
      <param name="time">The time to add</param>
      <returns>The sum of the given date and time</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)">
      <summary>
            Adds the specified period to the date.
            </summary>
      <param name="date">The date to add the period to</param>
      <param name="period">The period to add. Must not contain any (non-zero) time units.</param>
      <returns>The sum of the given date and period</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)">
      <summary>
            Compares two <see cref="T:NodaTime.LocalDate" /> values for equality. This requires
            that the dates be the same, within the same calendar.
            </summary>
      <param name="lhs">The first value to compare</param>
      <param name="rhs">The second value to compare</param>
      <returns>True if the two dates are the same and in the same calendar; false otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)">
      <summary>
            Compares two <see cref="T:NodaTime.LocalDate" /> values for inequality.
            </summary>
      <param name="lhs">The first value to compare</param>
      <param name="rhs">The second value to compare</param>
      <returns>False if the two dates are the same and in the same calendar; true otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)">
      <summary>
            Subtracts the specified period from the date.
            </summary>
      <param name="date">The date to subtract the period from</param>
      <param name="period">The period to subtract. Must not contain any (non-zero) time units.</param>
      <returns>The result of subtracting the given period from the date</returns>
    </member>
    <member name="M:NodaTime.LocalDate.Parse(System.String)">
      <summary>Parses the given string using the current culture's default format provider.</summary>
      <param name="value">The value to parse.</param>
      <returns>The parsed local date.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.Parse(System.String,System.IFormatProvider)">
      <summary>Parses the given string using the specified format provider.</summary>
      <param name="value">The value to parse.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed local date.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Parses the given string using the specified format pattern and format provider.</summary>
      <param name="value">The value to parse.</param>
      <param name="patternText">The text of the pattern to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed local date.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>Parses the given string using the specified patterns and format provider.</summary>
      <param name="value">The value to parse.</param>
      <param name="patterns">The patterns to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed local date.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.Plus(NodaTime.Period)">
      <summary>
            Adds the specified period to this date. Fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="period">The period to add. Must not contain any (non-zero) time units.</param>
      <returns>The sum of this date and the given period</returns>
    </member>
    <member name="M:NodaTime.LocalDate.PlusDays(System.Int32)">
      <summary>
            Returns a new LocalDate representing the current value with the given number of days added.
            </summary>
      <param name="days">The number of days to add</param>
      <returns>The current value plus the given number of days.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.PlusMonths(System.Int32)">
      <summary>
            Returns a new LocalDate representing the current value with the given number of months added.
            </summary>
      <param name="months">The number of months to add</param>
      <returns>The current date plus the given number of months</returns>
    </member>
    <member name="M:NodaTime.LocalDate.PlusWeeks(System.Int32)">
      <summary>
            Returns a new LocalDate representing the current value with the given number of weeks added.
            </summary>
      <param name="weeks">The number of weeks to add</param>
      <returns>The current value plus the given number of weeks.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.PlusYears(System.Int32)">
      <summary>
            Returns a new LocalDate representing the current value with the given number of years added.
            </summary>
      <param name="years">The number of years to add</param>
      <returns>The current value plus the given number of years.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)">
      <summary>
            Returns the previous <see cref="T:NodaTime.LocalDate" /> falling on the specified <see cref="P:NodaTime.LocalDate.IsoDayOfWeek" />.
            This is a strict "previous" - if this date on already falls on the target
            day of the week, the returned value will be a week earlier.
            </summary>
      <param name="targetDayOfWeek">The ISO day of the week to return the previous date of.</param>
      <returns>The previous <see cref="T:NodaTime.LocalDate" /> falling on the specified day of the week.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetDayOfWeek" /> is not a valid day of the
            week (Monday to Sunday).</exception>
    </member>
    <member name="M:NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)">
      <summary>
            Subtracts the specified period from the date. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="date">The date to subtract the period from</param>
      <param name="period">The period to subtract. Must not contain any (non-zero) time units.</param>
      <returns>The result of subtracting the given period from the date.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.ToString(System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.
            -or- null to obtain the format information from the current locale setting of the operating system. 
            </param>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.ToString(System.String)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use.
            -or- null to use the default pattern defined for the type of the <see cref="T:System.IFormattable" /> implementation. 
            </param>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use.
            -or- null to use the default pattern defined for the type of the <see cref="T:System.IFormattable" /> implementation. 
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.
            -or- null to obtain the numeric format information from the current locale setting of the operating system. 
            </param>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.TryParse(System.String,NodaTime.LocalDate@)">
      <summary>
            Attempts to parse the given string using the current culture's default format provider. If the parse is successful,
            the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Text.LocalDatePattern.DefaultTemplateValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="result">The parsed local date, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.TryParse(System.String,System.IFormatProvider,NodaTime.LocalDate@)">
      <summary>
            Attempts to parse the given string using the specified format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Text.LocalDatePattern.DefaultTemplateValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed local date, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.TryParseExact(System.String,System.String,System.IFormatProvider,NodaTime.LocalDate@)">
      <summary>
            Attempts to parse the given string using the specified pattern, format provider and style.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Text.LocalDatePattern.DefaultTemplateValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patternText">The text of the pattern to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed local date, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.TryParseExact(System.String,System.String[],System.IFormatProvider,NodaTime.LocalDate@)">
      <summary>
            Attempts to parse the given string using the specified patterns and format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Text.LocalDatePattern.DefaultTemplateValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patterns">The patterns to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed local date, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="P:NodaTime.LocalDate.WeekOfWeekYear">
      <summary>Gets the week within the WeekYear. See <see cref="P:NodaTime.LocalDate.WeekYear" /> for more details.</summary>
    </member>
    <member name="P:NodaTime.LocalDate.WeekYear">
      <summary>
            Gets the "week year" of this local date.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)">
      <summary>
            Creates a new LocalDate representing the same physical date, but in a different calendar.
            The returned LocalDate is likely to have different field values to this one.
            For example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.
            </summary>
      <param name="calendarSystem">The calendar system to convert this local date to. Must not be null.</param>
      <returns>The converted LocalDate</returns>
    </member>
    <member name="P:NodaTime.LocalDate.Year">
      <summary>Gets the year of this local date.</summary>
    </member>
    <member name="P:NodaTime.LocalDate.YearOfCentury">
      <summary>Gets the year of this local date within the century.</summary>
    </member>
    <member name="P:NodaTime.LocalDate.YearOfEra">
      <summary>Gets the year of this local date within the era.</summary>
    </member>
    <member name="T:NodaTime.LocalDateTime">
      <summary>
            A date and time in a particular calendar system.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct using the ISO calendar system.
            </summary>
      <param name="year">The year. This is the "absolute year", so a value of 0 means 1BC, for example.</param>
      <param name="month">The month.</param>
      <param name="day">The day.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct.
            </summary>
      <param name="year">The year. This is the "absolute year", so a value of 0 means 1BC, for example.</param>
      <param name="month">The month.</param>
      <param name="day">The day.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="calendar">The calendar.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="calendar" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct using the ISO calendar system.
            </summary>
      <param name="year">The year. This is the "absolute year", so a value of 0 means 1BC, for example.</param>
      <param name="month">The month.</param>
      <param name="day">The day.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct.
            </summary>
      <param name="year">The year. This is the "absolute year", so a value of 0 means 1BC, for example.</param>
      <param name="month">The month.</param>
      <param name="day">The day.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <param name="calendar">The calendar.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="calendar" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct using the ISO calendar system.
            </summary>
      <param name="year">The year. This is the "absolute year", so a value of 0 means 1BC, for example.</param>
      <param name="month">The month.</param>
      <param name="day">The day.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <param name="millisecond">The millisecond.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct.
            </summary>
      <param name="year">The year. This is the "absolute year", so a value of 0 means 1BC, for example.</param>
      <param name="month">The month.</param>
      <param name="day">The day.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <param name="millisecond">The millisecond.</param>
      <param name="calendar">The calendar.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="calendar" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct.
            </summary>
      <param name="year">The year. This is the "absolute year", so a value of 0 means 1BC, for example.</param>
      <param name="month">The month.</param>
      <param name="day">The day.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <param name="millisecond">The millisecond.</param>
      <param name="tickWithinMillisecond">The tick within millisecond.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct.
            </summary>
      <param name="year">The year. This is the "absolute year", so a value of 0 means 1BC, for example.</param>
      <param name="month">The month.</param>
      <param name="day">The day.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <param name="millisecond">The millisecond.</param>
      <param name="tickWithinMillisecond">The tick within millisecond.</param>
      <param name="calendar">The calendar.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="calendar" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.Add(NodaTime.LocalDateTime,NodaTime.Period)">
      <summary>
            Add the specified period to the date and time. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="localDateTime">Initial local date and time</param>
      <param name="period">Period to add</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.Calendar">
      <summary>Gets the calendar system associated with this local date and time.</summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.CenturyOfEra">
      <summary>Gets the century within the era of this local date and time.</summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.ClockHourOfHalfDay">
      <summary>
            Gets the hour of the half-day of this local date and time, in the range 1 to 12 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.Date">
      <summary>
            Gets the date portion of this local date and time as a <see cref="T:NodaTime.LocalDate" /> in the same calendar system as this value.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.DayOfMonth">
      <summary>
            Gets the day of this local date and time within the month.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.DayOfWeek">
      <summary>
            Gets the week day of this local date and time as a number.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.DayOfYear">
      <summary>
            Gets the day of this local date and time within the year.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.Equals(NodaTime.LocalDateTime)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.Era">
      <summary>Gets the era of this local date.</summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.FromDateTime(System.DateTime)">
      <summary>
            Converts a <see cref="T:System.DateTime" /> of any kind to a LocalDateTime in the ISO calendar. This does not perform
            any time zone conversions, so a DateTime with a <see cref="P:System.DateTime.Kind" /> of <see cref="F:System.DateTimeKind.Utc" />
            will still have the same day/hour/minute etc - it won't be converted into the local system time.
            </summary>
      <param name="dateTime">Value to convert into a Noda Time local date and time</param>
      <returns>A new <see cref="T:NodaTime.LocalDateTime" /> with the same values as the specified one.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.HourOfDay">
      <summary>
            Gets the hour of day of this local date and time, in the range 0 to 23 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.IsoDayOfWeek">
      <summary>
            Gets the week day of this local date and time expressed as an <see cref="T:NodaTime.IsoDayOfWeek" /> value,
            for calendars which use ISO days of the week.
            </summary>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
    </member>
    <member name="P:NodaTime.LocalDateTime.MillisecondOfDay">
      <summary>
            Gets the millisecond of this local date and time within the day, in the range 0 to 86,399,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.MillisecondOfSecond">
      <summary>
            Gets the millisecond of this local date and time within the second, in the range 0 to 999 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.Minus(NodaTime.Period)">
      <summary>
            Subtracts a period from a local date/time. Fields are subtracted in the order provided by the period.
            This is a convenience operator over the <see cref="M:NodaTime.LocalDateTime.Minus(NodaTime.Period)" /> method.
            </summary>
      <param name="period">Period to subtract</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.MinuteOfHour">
      <summary>
            Gets the minute of this local date and time, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.MonthOfYear">
      <summary>
            Gets the month of this local date and time within the year.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.Next(NodaTime.IsoDayOfWeek)">
      <summary>
            Returns the next <see cref="T:NodaTime.LocalDateTime" /> falling on the specified <see cref="P:NodaTime.LocalDateTime.IsoDayOfWeek" />,
            at the same time of day as this value.
            This is a strict "next" - if this value on already falls on the target
            day of the week, the returned value will be a week later.
            </summary>
      <param name="targetDayOfWeek">The ISO day of the week to return the next date of.</param>
      <returns>The next <see cref="T:NodaTime.LocalDate" /> falling on the specified day of the week.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetDayOfWeek" /> is not a valid day of the
            week (Monday to Sunday).</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_Addition(NodaTime.LocalDateTime,NodaTime.Period)">
      <summary>
            Adds a period to a local date/time. Fields are added in the order provided by the period.
            This is a convenience operator over the <see cref="M:NodaTime.LocalDateTime.Plus(NodaTime.Period)" /> method.
            </summary>
      <param name="localDateTime">Initial local date and time</param>
      <param name="period">Period to add</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_Equality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)">
      <summary>
            Implements the operator == (equality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_Inequality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)">
      <summary>
            Implements the operator != (inequality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are not equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_Subtraction(NodaTime.LocalDateTime,NodaTime.Period)">
      <summary>
            Subtracts a period from a local date/time. Fields are subtracted in the order provided by the period.
            This is a convenience operator over the <see cref="M:NodaTime.LocalDateTime.Minus(NodaTime.Period)" /> method.
            </summary>
      <param name="localDateTime">Initial local date and time</param>
      <param name="period">Period to subtract</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.Parse(System.String)">
      <summary>Parses the given string using the current culture's default format provider.</summary>
      <param name="value">The value to parse.</param>
      <returns>The parsed local date and time.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.Parse(System.String,System.IFormatProvider)">
      <summary>Parses the given string using the specified format provider.</summary>
      <param name="value">The value to parse.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed local date and time.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Parses the given string using the specified format pattern and format provider.</summary>
      <param name="value">The value to parse.</param>
      <param name="patternText">The text of the pattern to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed local date and time.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>Parses the given string using the specified patterns and format provider.</summary>
      <param name="value">The value to parse.</param>
      <param name="patterns">The patterns to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed local date and time.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.Plus(NodaTime.Period)">
      <summary>
            Adds a period to this local date/time. Fields are added in the order provided by the period.
            </summary>
      <param name="period">Period to add</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusDays(System.Int32)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of days added.
            </summary>
      <param name="days">The number of days to add</param>
      <returns>The current value plus the given number of days.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusHours(System.Int64)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of hours added.
            </summary>
      <param name="hours">The number of hours to add</param>
      <returns>The current value plus the given number of hours.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusMilliseconds(System.Int64)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of seconds added.
            </summary>
      <param name="milliseconds">The number of seconds to add</param>
      <returns>The current value plus the given number of seconds.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusMinutes(System.Int64)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of minutes added.
            </summary>
      <param name="minutes">The number of minutes to add</param>
      <returns>The current value plus the given number of minutes.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusMonths(System.Int32)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of months added.
            </summary>
      <param name="months">The number of months to add</param>
      <returns>The current value plus the given number of months.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusSeconds(System.Int64)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of seconds added.
            </summary>
      <param name="seconds">The number of seconds to add</param>
      <returns>The current value plus the given number of seconds.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusTicks(System.Int64)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of ticks added.
            </summary>
      <param name="ticks">The number of ticks to add</param>
      <returns>The current value plus the given number of seconds.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusWeeks(System.Int32)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of weeks added.
            </summary>
      <param name="weeks">The number of weeks to add</param>
      <returns>The current value plus the given number of weeks.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusYears(System.Int32)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of years added.
            </summary>
      <param name="years">The number of years to add</param>
      <returns>The current value plus the given number of years.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.Previous(NodaTime.IsoDayOfWeek)">
      <summary>
            Returns the previous <see cref="T:NodaTime.LocalDate" /> falling on the specified <see cref="P:NodaTime.LocalDateTime.IsoDayOfWeek" />,
            at the same time of day as this value.
            This is a strict "previous" - if this value on already falls on the target
            day of the week, the returned value will be a week earlier.
            </summary>
      <param name="targetDayOfWeek">The ISO day of the week to return the previous date of.</param>
      <returns>The previous <see cref="T:NodaTime.LocalDate" /> falling on the specified day of the week.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetDayOfWeek" /> is not a valid day of the
            week (Monday to Sunday).</exception>
    </member>
    <member name="P:NodaTime.LocalDateTime.SecondOfDay">
      <summary>
            Gets the second of this local date and time within the day, in the range 0 to 86,399 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.SecondOfMinute">
      <summary>
            Gets the second of this local date and time within the minute, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.Subtract(NodaTime.LocalDateTime,NodaTime.Period)">
      <summary>
            Subtracts the specified period from the date and time. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="localDateTime">Initial local date and time</param>
      <param name="period">Period to subtract</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.TickOfDay">
      <summary>
            Gets the tick of this local date and time within the day, in the range 0 to 863,999,999,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.TickOfMillisecond">
      <summary>
            Gets the tick of this local date and time within the millisecond, in the range 0 to 9,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.TickOfSecond">
      <summary>
            Gets the tick of this local time within the second, in the range 0 to 9,999,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.TimeOfDay">
      <summary>
            Gets the time portion of this local date and time as a <see cref="T:NodaTime.LocalTime" />.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.ToDateTimeUnspecified">
      <summary>
            Constructs a <see cref="T:System.DateTime" /> from this value which has a <see cref="P:System.DateTime.Kind" />
            of <see cref="F:System.DateTimeKind.Unspecified" />.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> value for the same date and time as this value.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.ToString(System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.
            -or- null to obtain the format information from the current locale setting of the operating system. 
            </param>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.ToString(System.String)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use.
            -or- null to use the default pattern defined for the type of the <see cref="T:System.IFormattable" /> implementation. 
            </param>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use.
            -or- null to use the default pattern defined for the type of the <see cref="T:System.IFormattable" /> implementation. 
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.
            -or- null to obtain the numeric format information from the current locale setting of the operating system. 
            </param>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.TryParse(System.String,NodaTime.LocalDateTime@)">
      <summary>
            Attempts to parse the given string using the current culture's default format provider. If the parse is successful,
            the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Text.LocalDateTimePattern.DefaultTemplateValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="result">The parsed local date and time, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.TryParse(System.String,System.IFormatProvider,NodaTime.LocalDateTime@)">
      <summary>
            Attempts to parse the given string using the specified format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Text.LocalDateTimePattern.DefaultTemplateValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed local date and time, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.TryParseExact(System.String,System.String,System.IFormatProvider,NodaTime.LocalDateTime@)">
      <summary>
            Attempts to parse the given string using the specified pattern, format provider and style.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Text.LocalDateTimePattern.DefaultTemplateValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patternText">The text of the pattern to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed local date and time, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,NodaTime.LocalDateTime@)">
      <summary>
            Attempts to parse the given string using the specified patterns and format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Text.LocalDateTimePattern.DefaultTemplateValue" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patterns">The patterns to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed local date and time, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.WeekOfWeekYear">
      <summary>
            Gets the week within the WeekYear. See <see cref="P:NodaTime.LocalDateTime.WeekYear" /> for more details.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.WeekYear">
      <summary>
            Gets the "week year" of this local date and time.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.WithCalendar(NodaTime.CalendarSystem)">
      <summary>
            Creates a new LocalDateTime representing the same physical date and time, but in a different calendar.
            The returned LocalDateTime is likely to have different date field values to this one.
            For example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.
            </summary>
      <param name="calendarSystem">The calendar system to convert this local date to. Must not be null.</param>
      <returns>The converted LocalDateTime.</returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.Year">
      <summary>Gets the year of this local date and time.</summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.YearOfCentury">
      <summary>Gets the year of this local date and time within its century.</summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.YearOfEra">
      <summary>Gets the year of this local date and time within its era.</summary>
    </member>
    <member name="T:NodaTime.LocalTime">
      <summary>
            LocalTime is an immutable struct representing a time of day, with no reference
            to a particular calendar, time zone or date.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a local time at the given hour, minute and second,
            with millisecond-of-second and tick-of-millisecond values of zero.
            </summary>
      <param name="hour">The hour of day.</param>
      <param name="minute">The minute of the hour.</param>
      <param name="second">The second of the minute.</param>
      <returns>The resulting time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid time</exception>
    </member>
    <member name="M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a local time at the given hour, minute, second and millisecond,
            with a tick-of-millisecond value of zero.
            </summary>
      <param name="hour">The hour of day.</param>
      <param name="minute">The minute of the hour.</param>
      <param name="second">The second of the minute.</param>
      <param name="millisecond">The millisecond of the second.</param>
      <returns>The resulting time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid time</exception>
    </member>
    <member name="M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a local time at the given hour, minute, second, millisecond and tick within millisecond.
            </summary>
      <param name="hour">The hour of day.</param>
      <param name="minute">The minute of the hour.</param>
      <param name="second">The second of the minute.</param>
      <param name="millisecond">The millisecond of the second.</param>
      <param name="tickWithinMillisecond">The tick within the millisecond.</param>
      <returns>The resulting time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid time</exception>
    </member>
    <member name="M:NodaTime.LocalTime.Add(NodaTime.LocalTime,NodaTime.Period)">
      <summary>
            Adds the specified period to the time. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="time">The time to add the period to</param>
      <param name="period">The period to add. Must not contain any (non-zero) date units.</param>
      <returns>The sum of the given time and period</returns>
    </member>
    <member name="P:NodaTime.LocalTime.ClockHourOfHalfDay">
      <summary>
            Gets the hour of the half-day of this date and time, in the range 1 to 12 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.Equals(NodaTime.LocalTime)">
      <summary>
            Compares this local time with the specified one for equality,
            by checking whether the two values represent the exact same local time, down to the tick.
            </summary>
      <param name="other">The other local time to compare this one with</param>
      <returns>True if the specified time is equal to this one; false otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalTime.Equals(System.Object)">
      <summary>
            Compares this local time with the specified reference. A local time is
            only equal to another local time with the same underlying tick value.
            </summary>
      <param name="obj">The object to compare this one with</param>
      <returns>True if the specified value is a local time is equal to this one; false otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalTime.FromHourMinuteSecondTick(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Factory method for creating a local time from the hour of day, minute of hour, second of minute, and tick of second.
            This is not a constructor overload as it would have the same signature as the one taking millisecond of second.
            </summary>
      <param name="hour">The hour of day in the desired time, in the range [0, 23].</param>
      <param name="minute">The minute of hour in the desired time, in the range [0, 59].</param>
      <param name="second">The second of minute in the desired time, in the range [0, 59].</param>
      <param name="tickWithinSecond">The tick within the second in the desired time, in the range [0, 9999999].</param>
      <returns>The resulting time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid time</exception>
    </member>
    <member name="M:NodaTime.LocalTime.GetHashCode">
      <summary>
            Returns a hash code for this local time.
            </summary>
      <returns>A hash code for this local time.</returns>
    </member>
    <member name="P:NodaTime.LocalTime.HourOfDay">
      <summary>
            Gets the hour of day of this local time, in the range 0 to 23 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalTime.LocalDateTime">
      <summary>
            Returns a LocalDateTime with this local time, on January 1st 1970 in the ISO calendar.
            </summary>
    </member>
    <member name="F:NodaTime.LocalTime.Midnight">
      <summary>
            Local time at midnight, i.e. 0 hours, 0 minutes, 0 seconds.
            </summary>
    </member>
    <member name="P:NodaTime.LocalTime.MillisecondOfDay">
      <summary>
            Gets the millisecond of this local time within the day, in the range 0 to 86,399,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalTime.MillisecondOfSecond">
      <summary>
            Gets the millisecond of this local time within the second, in the range 0 to 999 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.Minus(NodaTime.Period)">
      <summary>
            Subtracts the specified period from this time. Fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="period">The period to subtract. Must not contain any (non-zero) date units.</param>
      <returns>The result of subtracting the given period from this time.</returns>
    </member>
    <member name="P:NodaTime.LocalTime.MinuteOfHour">
      <summary>
            Gets the minute of this local time, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="F:NodaTime.LocalTime.Noon">
      <summary>
            Local time at noon, i.e. 12 hours, 0 minutes, 0 seconds.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.op_Addition(NodaTime.LocalTime,NodaTime.Period)">
      <summary>
            Creates a new local time by adding a period to an existing time. The period must not contain
            any date-related units (days etc) with non-zero values.
            </summary>
      <param name="time">The time to add the period to</param>
      <param name="period">The period to add</param>
      <returns>The result of adding the period to the time, wrapping via midnight if necessary</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)">
      <summary>
            Compares two local times for equality, by checking whether they represent
            the exact same local time, down to the tick.
            </summary>
      <param name="lhs">The first value to compare</param>
      <param name="rhs">The second value to compare</param>
      <returns>True if the two times are the same; false otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)">
      <summary>
            Compares two local times for inequality.
            </summary>
      <param name="lhs">The first value to compare</param>
      <param name="rhs">The second value to compare</param>
      <returns>False if the two times are the same; true otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)">
      <summary>
            Creates a new local time by subtracting a period from an existing time. The period must not contain
            any date-related units (days etc) with non-zero values.
            </summary>
      <param name="time">The time to subtract the period from</param>
      <param name="period">The period to subtract</param>
      <returns>The result of subtract the period from the time, wrapping via midnight if necessary</returns>
    </member>
    <member name="M:NodaTime.LocalTime.Parse(System.String)">
      <summary>
            Parses the given string using the current culture's default format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <returns>The parsed local time.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.Parse(System.String,System.IFormatProvider)">
      <summary>
            Parses the given string using the specified format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed local time.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>
            Parses the given string using the specified format pattern and format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patternText">The text of the pattern to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed local time.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>
            Parses the given string using the specified patterns and format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patterns">The patterns to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed local time.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.Plus(NodaTime.Period)">
      <summary>
            Adds the specified period to this time. Fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="period">The period to add. Must not contain any (non-zero) date units.</param>
      <returns>The sum of this time and the given period</returns>
    </member>
    <member name="M:NodaTime.LocalTime.PlusHours(System.Int64)">
      <summary>
            Returns a new LocalTime representing the current value with the given number of hours added.
            </summary>
      <param name="hours">The number of hours to add</param>
      <returns>The current value plus the given number of hours.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.PlusMilliseconds(System.Int64)">
      <summary>
            Returns a new LocalTime representing the current value with the given number of seconds added.
            </summary>
      <param name="milliseconds">The number of seconds to add</param>
      <returns>The current value plus the given number of seconds.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.PlusMinutes(System.Int64)">
      <summary>
            Returns a new LocalTime representing the current value with the given number of minutes added.
            </summary>
      <param name="minutes">The number of minutes to add</param>
      <returns>The current value plus the given number of minutes.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.PlusSeconds(System.Int64)">
      <summary>
            Returns a new LocalTime representing the current value with the given number of seconds added.
            </summary>
      <param name="seconds">The number of seconds to add</param>
      <returns>The current value plus the given number of seconds.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.PlusTicks(System.Int64)">
      <summary>
            Returns a new LocalTime representing the current value with the given number of ticks added.
            </summary>
      <param name="ticks">The number of ticks to add</param>
      <returns>The current value plus the given number of seconds.</returns>
    </member>
    <member name="P:NodaTime.LocalTime.SecondOfDay">
      <summary>
            Gets the second of this local time within the day, in the range 0 to 86,399 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalTime.SecondOfMinute">
      <summary>
            Gets the second of this local time within the minute, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.Period)">
      <summary>
            Subtracts the specified period from the time. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="time">The time to subtract the period from</param>
      <param name="period">The period to subtract. Must not contain any (non-zero) date units.</param>
      <returns>The result of subtracting the given period from the time.</returns>
    </member>
    <member name="P:NodaTime.LocalTime.TickOfDay">
      <summary>
            Gets the tick of this local time within the day, in the range 0 to 863,999,999,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalTime.TickOfMillisecond">
      <summary>
            Gets the tick of this local time within the millisecond, in the range 0 to 9,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalTime.TickOfSecond">
      <summary>
            Gets the tick of this local time within the second, in the range 0 to 9,999,999 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:NodaTime.LocalTime.ToString(System.IFormatProvider)">
      <summary>
              Formats the value of the current instance using the specified format.
            </summary>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.
              -or- 
              null to obtain the format information from the current locale setting of the operating system. 
            </param>
      <returns>
              A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="M:NodaTime.LocalTime.ToString(System.String)">
      <summary>
              Formats the value of the current instance using the specified format.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use.
              -or- 
              null to use the default pattern defined for the type of the <see cref="T:System.IFormattable" /> implementation. 
            </param>
      <returns>
              A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="M:NodaTime.LocalTime.ToString(System.String,System.IFormatProvider)">
      <summary>
              Formats the value of the current instance using the specified format.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use.
              -or- 
              null to use the default pattern defined for the type of the <see cref="T:System.IFormattable" /> implementation. 
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.
              -or- 
              null to obtain the numeric format information from the current locale setting of the operating system. 
            </param>
      <returns>
              A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="M:NodaTime.LocalTime.TryParse(System.String,NodaTime.LocalTime@)">
      <summary>
            Attempts to parse the given string using the current culture's default format provider. If the parse is successful,
            the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.LocalTime.Midnight" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="result">The parsed local time, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.TryParse(System.String,System.IFormatProvider,NodaTime.LocalTime@)">
      <summary>
            Attempts to parse the given string using the specified format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.LocalTime.Midnight" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed local time, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.TryParseExact(System.String,System.String,System.IFormatProvider,NodaTime.LocalTime@)">
      <summary>
            Attempts to parse the given string using the specified pattern, format provider and style.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.LocalTime.Midnight" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patternText">The text of the pattern to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed local time, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.TryParseExact(System.String,System.String[],System.IFormatProvider,NodaTime.LocalTime@)">
      <summary>
            Attempts to parse the given string using the specified patterns and format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.LocalTime.Midnight" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patterns">The patterns to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed local time, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="T:NodaTime.NodaConstants">
      <summary>
            Useful constants, mostly along the lines of "number of milliseconds in an hour".
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.DateTimeEpochTicks">
      <summary>
            The number of ticks in a <see cref="T:System.DateTime" /> at the Unix epoch.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.DaysPerStandardWeek">
      <summary>
            Number of days in a standard Gregorian week.
            The value of this constant is 7.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.HoursPerStandardDay">
      <summary>
            A constant for the number of hours in a standard day. Note that the number of hours
            in a day can vary due to daylight saving effects.
            The value of this constant is 24.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.HoursPerStandardWeek">
      <summary>
            A constant for the number of hours in a standard week of seven 24-hour days.
            The value of this constant is 168.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MillisecondsPerHour">
      <summary>
            A constant for the number of milliseconds per hour.
            The value of this constant is 3,600,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MillisecondsPerMinute">
      <summary>
            A constant for the number of milliseconds per minute.
            The value of this constant is 60,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MillisecondsPerSecond">
      <summary>
            A constant for the number of milliseconds per second.
            The value of this constant is 1000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MillisecondsPerStandardDay">
      <summary>
            A constant for the number of milliseconds per standard 24-hour day.
            The value of this constant is 86,400,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MillisecondsPerStandardWeek">
      <summary>
            A constant for the number of milliseconds per standard week of seven 24-hour days.
            The value of this constant is 604,800,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MinutesPerHour">
      <summary>
            A constant for the number of minutes per hour.
            The value of this constant is 60.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MinutesPerStandardDay">
      <summary>
            A constant for the number of minutes per standard 24-hour day.
            The value of this constant is 1,440.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MinutesPerStandardWeek">
      <summary>
            A constant for the number of minutes per standard week of seven 24-hour days.
            The value of this constant is 10,080.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.SecondsPerHour">
      <summary>
            A constant for the number of seconds per hour.
            The value of this constant is 3,600.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.SecondsPerMinute">
      <summary>
            A constant for the number of seconds per minute.
            The value of this constant is 60.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.SecondsPerStandardDay">
      <summary>
            A constant for the number of seconds per standard 24-hour day.
            The value of this constant is 86,400.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.SecondsPerWeek">
      <summary>
            A constant for the number of seconds per standard week of seven 24-hour days.
            The value of this constant is 604,800.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerHour">
      <summary>
            A constant for the number of ticks in a minute. The value of this constant is 36,000,000,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerMillisecond">
      <summary>
            A constant for the number of ticks in a millisecond. The value of this constant is 10,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerMinute">
      <summary>
            A constant for the number of ticks in a minute. The value of this constant is 600,000,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerSecond">
      <summary>
            A constant for the number of ticks in a second. The value of this constant is 10,000,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerStandardDay">
      <summary>
            A constant for the number of ticks in a standard 24-hour day.
            The value of this constant is 864,000,000,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerStandardWeek">
      <summary>
            A constant for the number of ticks in a standard week of seven 24-hour days.
            The value of this constant is 6,048,000,000,000.
            </summary>
    </member>
    <member name="T:NodaTime.Offset">
      <summary>
              An offset from UTC in milliseconds. A positive value means that the local time is
              ahead of UTC (e.g. for Europe); a negative value means that the local time is behind
              UTC (e.g. for America).
            </summary>
    </member>
    <member name="M:NodaTime.Offset.Add(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Adds one Offset to another. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> representing the sum of the given values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.CompareTo(NodaTime.Offset)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
              A 32-bit signed integer that indicates the relative order of the objects being compared.
              The return value has the following meanings:
              <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>&lt; 0</term><description>This object is less than the <paramref name="other" /> parameter.</description></item><item><term>0</term><description>This object is equal to <paramref name="other" />.</description></item><item><term>&gt; 0</term><description>This object is greater than <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:NodaTime.Offset.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates an offset with the specified number of hours, minutes, seconds, and
            milliseconds. This offset is always non-negative.
            </summary>
      <param name="hours">The number of hours, in the range [0, 24).</param>
      <param name="minutes">The number of minutes, in the range [0, 60).</param>
      <param name="seconds">The number of second, in the range [0, 60).</param>
      <param name="fractionalSeconds">The number of milliseconds within the second,
            in the range [0, 1000).</param>
      <returns>
              A new <see cref="T:NodaTime.Offset" /> representing the given values.
            </returns>
    </member>
    <member name="M:NodaTime.Offset.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Creates an offset from the given values, including a sign to indicate whether or not the returned
            offset should be negative.
            </summary>
      <param name="hours">The number of hours, in the range [0, 24).</param>
      <param name="minutes">The number of minutes, in the range [0, 60).</param>
      <param name="seconds">The number of second, in the range [0, 60).</param>
      <param name="fractionalSeconds">The number of milliseconds within the second,
            in the range [0, 1000).</param>
      <param name="negative">True if a negative offset should be created, false for a positive one.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> representing the given values.</returns>
    </member>
    <member name="M:NodaTime.Offset.Equals(NodaTime.Offset)">
      <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
              true if the current object is equal to the <paramref name="other" /> parameter;
              otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.Offset.Equals(System.Object)">
      <summary>
              Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
              otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:NodaTime.Offset.FractionalSeconds">
      <summary>
            Gets the fractional seconds of the offset i.e. the milliseconds of the second. This is always a positive value.
            </summary>
    </member>
    <member name="M:NodaTime.Offset.FromHours(System.Int32)">
      <summary>
            Creates an offset with the specified number of hours.
            </summary>
      <param name="hours">The number of hours to represent in the new offset.</param>
      <returns>
            A new <see cref="T:NodaTime.Offset" /> representing the given value.
            </returns>
    </member>
    <member name="M:NodaTime.Offset.FromMilliseconds(System.Int32)">
      <summary>
              Returns the offset for the given milliseconds value.
            </summary>
      <param name="milliseconds">The int milliseconds value.</param>
      <returns>The <see cref="T:NodaTime.Offset" /> for the given milliseconds value</returns>
    </member>
    <member name="M:NodaTime.Offset.FromTicks(System.Int64)">
      <summary>
            Creates a new offset from the given number of ticks.
            </summary>
      <param name="ticks">The number of ticks specifying the length of the new offset.</param>
      <returns>An offset representing the given number of ticks, to the (truncated) millisecond.</returns>
    </member>
    <member name="M:NodaTime.Offset.GetHashCode">
      <summary>
              Returns a hash code for this instance.
            </summary>
      <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data
              structures like a hash table. 
            </returns>
    </member>
    <member name="P:NodaTime.Offset.Hours">
      <summary>
              Gets the hours of the offset. This is always a positive value.
            </summary>
    </member>
    <member name="P:NodaTime.Offset.IsNegative">
      <summary>
              Gets a value indicating whether this instance is negative.
            </summary>
    </member>
    <member name="M:NodaTime.Offset.Max(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Returns the greater offset of the given two, i.e. the one which will give a later local
            time when added to an instant.
            </summary>
      <param name="x">The first offset</param>
      <param name="y">The second offset</param>
      <returns>The greater offset of <paramref name="x" /> and <paramref name="y" />.</returns>
    </member>
    <member name="F:NodaTime.Offset.MaxValue">
      <summary>
            The maximum permitted offset; one millisecond less than a standard day after UTC.
            </summary>
    </member>
    <member name="M:NodaTime.Offset.Min(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Returns the lower offset of the given two, i.e. the one which will give an earlier local
            time when added to an instant.
            </summary>
      <param name="x">The first offset</param>
      <param name="y">The second offset</param>
      <returns>The lower offset of <paramref name="x" /> and <paramref name="y" />.</returns>
    </member>
    <member name="M:NodaTime.Offset.Minus(NodaTime.Offset)">
      <summary>
            Returns the result of subtracting another Offset from this one, for a fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="other">The offset to subtract</param>
      <returns>The result of subtracting the other offset from this one.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="P:NodaTime.Offset.Minutes">
      <summary>
              Gets the minutes of the offset. This is always a positive value.
            </summary>
    </member>
    <member name="F:NodaTime.Offset.MinValue">
      <summary>
            The minimum permitted offset; one millisecond less than a standard day before UTC.
            </summary>
    </member>
    <member name="M:NodaTime.Offset.Negate(NodaTime.Offset)">
      <summary>
            Returns the negation of the specified offset. This is the method form of the unary minus operator.
            </summary>
      <param name="offset">The offset to negate.</param>
      <returns>The negation of the specified offset.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_Addition(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator + (addition).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> representing the sum of the given values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.op_Equality(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator == (equality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_GreaterThan(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator &gt; (greater than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_GreaterThanOrEqual(NodaTime.Offset,NodaTime.Offset)">
      <summary>
              Implements the operator &gt;= (greater than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_Inequality(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator != (inequality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are not equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_LessThan(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator &lt; (less than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_LessThanOrEqual(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator &lt;= (less than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_Subtraction(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator - (subtraction).
            </summary>
      <param name="minuend">The left hand side of the operator.</param>
      <param name="subtrahend">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> representing the difference of the given values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.op_UnaryNegation(NodaTime.Offset)">
      <summary>
              Implements the unary operator - (negation).
            </summary>
      <param name="offset">The offset to negate.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> instance with a negated value.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_UnaryPlus(NodaTime.Offset)">
      <summary>
            Implements the unary operator + .
            </summary>
      <param name="offset">The operand.</param>
      <returns>The same <see cref="T:NodaTime.Offset" /> instance</returns>
    </member>
    <member name="M:NodaTime.Offset.Parse(System.String)">
      <summary>
            Parses the given string using the current culture's default format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <returns>The parsed offset.</returns>
    </member>
    <member name="M:NodaTime.Offset.Parse(System.String,System.IFormatProvider)">
      <summary>
            Parses the given string using the specified format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed offset.</returns>
    </member>
    <member name="M:NodaTime.Offset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>
            Parses the given string using the specified format pattern and format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patternText">The text of the pattern to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed offset.</returns>
    </member>
    <member name="M:NodaTime.Offset.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>
            Parses the given string using the specified patterns and format provider.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patterns">The patterns to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <returns>The parsed offset.</returns>
    </member>
    <member name="M:NodaTime.Offset.Plus(NodaTime.Offset)">
      <summary>
            Returns the result of adding another Offset to this one, for a fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="other">The offset to add</param>
      <returns>The result of adding the other offset to this one.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="P:NodaTime.Offset.Seconds">
      <summary>
            Gets the seconds of the offset. This is always a positive value.
            </summary>
    </member>
    <member name="M:NodaTime.Offset.Subtract(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Subtracts one Offset from another. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="minuend">The left hand side of the operator.</param>
      <param name="subtrahend">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> representing the difference of the given values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:NodaTime.Offset.ToString(System.IFormatProvider)">
      <summary>
              Formats the value of the current instance using the specified format.
            </summary>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.
              -or- 
              null to obtain the format information from the current locale setting of the operating system. 
            </param>
      <returns>
              A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="M:NodaTime.Offset.ToString(System.String)">
      <summary>
              Formats the value of the current instance using the specified format.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use.
              -or- 
              null to use the default pattern defined for the type of the <see cref="T:System.IFormattable" /> implementation. 
            </param>
      <returns>
              A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="M:NodaTime.Offset.ToString(System.String,System.IFormatProvider)">
      <summary>
              Formats the value of the current instance using the specified format.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use.
              -or- 
              null to use the default pattern defined for the type of the <see cref="T:System.IFormattable" /> implementation. 
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.
              -or- 
              null to obtain the numeric format information from the current locale setting of the operating system. 
            </param>
      <returns>
              A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="P:NodaTime.Offset.TotalMilliseconds">
      <summary>
            Gets the total number of milliseconds in the offset.
            </summary>
    </member>
    <member name="P:NodaTime.Offset.TotalTicks">
      <summary>
            Returns the number of ticks represented by this offset.
            </summary>
    </member>
    <member name="M:NodaTime.Offset.ToTimeSpan">
      <summary>
            Converts this offset to a .NET standard <see cref="T:System.TimeSpan" /> value.
            </summary>
      <returns>An equivalent <see cref="T:System.TimeSpan" /> to this value.</returns>
    </member>
    <member name="M:NodaTime.Offset.TryParse(System.String,NodaTime.Offset@)">
      <summary>
            Attempts to parse the given string using the current culture's default format provider. If the parse is successful,
            the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Offset.Zero" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="result">The parsed offset, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.Offset.TryParse(System.String,System.IFormatProvider,NodaTime.Offset@)">
      <summary>
            Attempts to parse the given string using the specified format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Offset.Zero" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed offset, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.Offset.TryParseExact(System.String,System.String,System.IFormatProvider,NodaTime.Offset@)">
      <summary>
            Attempts to parse the given string using the specified pattern, format provider and style.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Offset.Zero" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patternText">The text of the pattern to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed offset, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.Offset.TryParseExact(System.String,System.String[],System.IFormatProvider,NodaTime.Offset@)">
      <summary>
            Attempts to parse the given string using the specified patterns and format provider.
            If the parse is successful, the result is stored in the <paramref name="result" /> parameter and the return value is true;
            otherwise <see cref="F:NodaTime.Offset.Zero" /> is stored in the parameter and the return value is false.
            </summary>
      <param name="value">The value to parse.</param>
      <param name="patterns">The patterns to use for parsing.</param>
      <param name="formatProvider">The format provider to use for culture-specific settings.</param>
      <param name="result">The parsed offset, when successful.</param>
      <returns>true if the value was parsed successfully; false otherwise.</returns>
    </member>
    <member name="F:NodaTime.Offset.Zero">
      <summary>
            An offset of zero ticks - effectively the permanent offset for UTC.
            </summary>
    </member>
    <member name="T:NodaTime.Period">
      <summary>
            Represents a period of time expressed in human chronological terms: hours, days,
            weeks, months and so on. All implementations in Noda Time are immutable, and return fields
            in descending size order: hours before minutes, for example.
            </summary>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalDate,NodaTime.LocalDate)">
      <summary>
            Returns the difference between two dates using the "year month day" period type.
            </summary>
      <param name="start">Start date</param>
      <param name="end">End date</param>
      <returns>The period between the two dates, using year, month and day fields.</returns>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalDate,NodaTime.LocalDate,NodaTime.PeriodUnits)">
      <summary>
            Returns the period between a start and an end date, using the set of fields in the given
            period type.
            </summary>
      <param name="start">Start date</param>
      <param name="end">End date</param>
      <param name="units">Units to use for calculations</param>
      <returns>The period between the given dates using the specified period type</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="units" /> contains time fields, is empty or contains unknown values</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="start" /> and <paramref name="end" /> use different calendars</exception>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalDateTime,NodaTime.LocalDateTime)">
      <summary>
            Returns the difference between two date/times using the "all fields" period type.
            </summary>
      <param name="start">Start date/time</param>
      <param name="end">End date/time</param>
      <returns>The period between the two date and time values, using all period fields.</returns>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalDateTime,NodaTime.LocalDateTime,NodaTime.PeriodUnits)">
      <summary>
            Returns the period between a start and an end date/time, using the set of fields in the given
            period type.
            </summary>
      <param name="start">Start date/time</param>
      <param name="end">End date/time</param>
      <param name="units">Period type to use for calculations</param>
      <returns>The period between the given date/times</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="units" /> is empty or contained unknown values</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="start" /> and <paramref name="end" /> use different calendars</exception>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalTime,NodaTime.LocalTime)">
      <summary>
            Returns the difference between two dates using the "time" period type.
            </summary>
      <param name="start">Start time</param>
      <param name="end">End time</param>
      <returns>The period between the two times, using the "time" period fields.</returns>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalTime,NodaTime.LocalTime,NodaTime.PeriodUnits)">
      <summary>
            Returns the period between a start and an end time, using the set of fields in the given
            period type.
            </summary>
      <param name="start">Start time</param>
      <param name="end">End time</param>
      <param name="units">Units to use for calculations</param>
      <returns>The period between the given times</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="units" /> contains date fields, is empty or contains unknown values</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="start" /> and <paramref name="end" /> use different calendars</exception>
    </member>
    <member name="P:NodaTime.Period.Days">
      <summary>
            Gets the number of days within this period.
            </summary>
    </member>
    <member name="M:NodaTime.Period.Equals(NodaTime.Period)">
      <summary>
            Compares the given period for equality with this one.
            </summary>
      <param name="other">The period to compare this one with.</param>
      <returns>True if this period has the same values for the same fields as the one specified.</returns>
    </member>
    <member name="M:NodaTime.Period.Equals(System.Object)">
      <summary>
            Compares the given object for equality with this one, as per <see cref="M:NodaTime.Period.Equals(NodaTime.Period)" />.
            </summary>
      <param name="other">The value to compare this one with.</param>
      <returns>true if the other object is a period equal to this one, consistent with <see cref="M:NodaTime.Period.Equals(NodaTime.Period)" /></returns>
    </member>
    <member name="M:NodaTime.Period.FromDays(System.Int64)">
      <summary>
            Creates a period representing the specified number of days.
            </summary>
      <param name="days">The number of days in the new period</param>
      <returns>A period consisting of the given number of days.</returns>
    </member>
    <member name="M:NodaTime.Period.FromHours(System.Int64)">
      <summary>
            Creates a period representing the specified number of hours.
            </summary>
      <param name="hours">The number of hours in the new period</param>
      <returns>A period consisting of the given number of hours.</returns>
    </member>
    <member name="M:NodaTime.Period.FromMillseconds(System.Int64)">
      <summary>
            Creates a period representing the specified number of miliseconds.
            </summary>
      <param name="milliseconds">The number of milliseconds in the new period</param>
      <returns>A period consisting of the given number of milliseconds.</returns>
    </member>
    <member name="M:NodaTime.Period.FromMinutes(System.Int64)">
      <summary>
            Creates a period representing the specified number of minutes.
            </summary>
      <param name="minutes">The number of minutes in the new period</param>
      <returns>A period consisting of the given number of minutes.</returns>
    </member>
    <member name="M:NodaTime.Period.FromMonths(System.Int64)">
      <summary>
            Creates a period representing the specified number of months.
            </summary>
      <param name="months">The number of months in the new period</param>
      <returns>A period consisting of the given number of months.</returns>
    </member>
    <member name="M:NodaTime.Period.FromSeconds(System.Int64)">
      <summary>
            Creates a period representing the specified number of seconds.
            </summary>
      <param name="seconds">The number of seconds in the new period</param>
      <returns>A period consisting of the given number of seconds.</returns>
    </member>
    <member name="M:NodaTime.Period.FromTicks(System.Int64)">
      <summary>
            Creates a period representing the specified number of ticks.
            </summary>
      <param name="ticks">The number of ticks in the new period</param>
      <returns>A period consisting of the given number of ticks.</returns>
    </member>
    <member name="M:NodaTime.Period.FromYears(System.Int64)">
      <summary>
            Creates a period representing the specified number of years.
            </summary>
      <param name="years">The number of years in the new period</param>
      <returns>A period consisting of the given number of years.</returns>
    </member>
    <member name="M:NodaTime.Period.GetEnumerator">
      <summary>
            Returns the units and values within this period.
            </summary>
      <returns>The units and values within this period.</returns>
    </member>
    <member name="M:NodaTime.Period.GetHashCode">
      <summary>
            Returns the hash code for this period, consistent with <see cref="M:NodaTime.Period.Equals(NodaTime.Period)" />.
            </summary>
      <returns>The hash code for this period.</returns>
    </member>
    <member name="P:NodaTime.Period.HasDateComponent">
      <summary>
            Returns whether or not this period contains any non-zero date-based units (days or higher).
            The units of this period may include date units, so long as they have zero values.
            </summary>
    </member>
    <member name="P:NodaTime.Period.HasTimeComponent">
      <summary>
            Returns whether or not this period contains any non-zero-valued time-based units (hours or lower).
            The units of this period may include time units, so long as they have zero values.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Hours">
      <summary>
            Gets the number of hours within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Milliseconds">
      <summary>
            Gets the number of milliseconds within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Minutes">
      <summary>
            Gets the number of minutes within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Months">
      <summary>
            Gets the number of months within this period.
            </summary>
    </member>
    <member name="M:NodaTime.Period.op_Addition(NodaTime.Period,NodaTime.Period)">
      <summary>
            Adds two periods together, by simply adding the values for each field. Currently this
            returns a period with a period type of "all fields".
            </summary>
      <param name="left">The first period to add</param>
      <param name="right">The second period to add</param>
      <returns>The sum of the two periods.</returns>
    </member>
    <member name="M:NodaTime.Period.op_Subtraction(NodaTime.Period,NodaTime.Period)">
      <summary>
            Subtracts one periods from another, by simply subtracting each field value. Currently this
            returns a period with a period type of "all fields".
            </summary>
      <param name="minuend">The period to subtract the second operand from</param>
      <param name="subtrahend">The period to subtract the first operand from</param>
      <returns>The result of subtracting all the values in the second operand from the values in the first.</returns>
    </member>
    <member name="P:NodaTime.Period.Seconds">
      <summary>
            Gets the number of seconds within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Ticks">
      <summary>
            Gets the number of ticks within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Units">
      <summary>
            Returns the units within this period, such as "year, month, day" or "hour".
            </summary>
    </member>
    <member name="P:NodaTime.Period.Weeks">
      <summary>
            Gets the number of weeks within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Years">
      <summary>
            Gets the number of years within this period.
            </summary>
    </member>
    <member name="T:NodaTime.Period.UnitValue">
      <summary>
            A simple combination of a single unit (year, month, hour, minute etc) with a 64-bit integer value.
            </summary>
    </member>
    <member name="M:NodaTime.Period.UnitValue.#ctor(NodaTime.PeriodUnits,System.Int64)">
      <summary>
            Constructs a 
            </summary>
      <param name="unit">The unit of the new unit/value pair. Must be a single unit rather than a combination of multiple units.</param>
      <param name="value">The value of the new unit/value pair.</param>
    </member>
    <member name="P:NodaTime.Period.UnitValue.Unit">
      <summary>
            The single unit (Month, Year etc) that this value applies to.
            </summary>
    </member>
    <member name="P:NodaTime.Period.UnitValue.Value">
      <summary>
            The magnitude of the value, e.g. the number of months in a period.
            </summary>
    </member>
    <member name="T:NodaTime.PeriodUnits">
      <summary>
            The units within a <see cref="T:NodaTime.Period" />. When a period is created to find the difference between two local values,
            the caller may specify which units are required - for example, you can ask for the difference between two dates
            in "years and weeks". Units are always applied largest-first in arithmetic.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Year">
      <summary>
            Year element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Month">
      <summary>
            Month element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Week">
      <summary>
            Week element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Day">
      <summary>
            Day element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.AllDateUnits">
      <summary>
            Compound value representing the combination of <see cref="F:NodaTime.PeriodUnits.Year" />, <see cref="F:NodaTime.PeriodUnits.Month" />, <see cref="F:NodaTime.PeriodUnits.Week" /> and <see cref="F:NodaTime.PeriodUnits.Day" />.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.YearMonthDay">
      <summary>
            Compound value representing the combination of <see cref="F:NodaTime.PeriodUnits.Year" />, <see cref="F:NodaTime.PeriodUnits.Month" /> and <see cref="F:NodaTime.PeriodUnits.Day" />.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Hour">
      <summary>
            Hour element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Minute">
      <summary>
            Minute element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Second">
      <summary>
            Second element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Millisecond">
      <summary>
            Millisecond element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Tick">
      <summary>
            Tick element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.HourMinuteSecond">
      <summary>
            Compound value representing the combination of <see cref="F:NodaTime.PeriodUnits.Hour" />, <see cref="F:NodaTime.PeriodUnits.Minute" /> and <see cref="F:NodaTime.PeriodUnits.Second" />.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.AllTimeUnits">
      <summary>
            Compound value representing the combination of all time elements.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.DateAndTime">
      <summary>
            Compound value representing the combination of all possible elements except weeks.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.AllUnits">
      <summary>
            Compound value representing the combination of all possible elements.
            </summary>
    </member>
    <member name="T:NodaTime.SkippedTimeException">
      <summary>
            Exception thrown to indicate that the specified local time doesn't
            exist in a particular time zone due to daylight saving time changes.    
            </summary>
    </member>
    <member name="M:NodaTime.SkippedTimeException.#ctor(NodaTime.LocalDateTime,NodaTime.DateTimeZone)">
      <summary>
            Creates a new instance for the given local date/time and time zone.
            </summary>
      <param name="localDateTime">The local date time which is skipped in the specified time zone.</param>
      <param name="zone">The time zone in which the local date time does not exist.</param>
    </member>
    <member name="P:NodaTime.SkippedTimeException.LocalDateTime">
      <summary>
            The local instant which is invalid in the time zone
            </summary>
    </member>
    <member name="P:NodaTime.SkippedTimeException.Zone">
      <summary>
            The time zone in which the local instant is invalid
            </summary>
    </member>
    <member name="T:NodaTime.SystemClock">
      <summary>
            Singleton implementation of <see cref="T:NodaTime.IClock" /> which reads the current system time.
            </summary>
    </member>
    <member name="F:NodaTime.SystemClock.Instance">
      <summary>
            The singleton instance of <see cref="T:NodaTime.SystemClock" />.
            </summary>
    </member>
    <member name="P:NodaTime.SystemClock.Now">
      <summary>
            Gets the current time as an <see cref="T:NodaTime.Instant" />.
            </summary>
    </member>
    <member name="P:NodaTime.SystemClock.SystemNow">
      <summary>
            Retrieves the current system time; equivalent to calling <c>SystemClock.Instance.Now</c>.
            </summary>
    </member>
    <member name="T:NodaTime.ZonedDateTime">
      <summary>
            A <see cref="P:NodaTime.ZonedDateTime.LocalDateTime" /> in a specific time zone and with a particular offset to distinguish between otherwise-ambiguous
            instants. A ZonedDateTime is global, in that it maps to a single <see cref="T:NodaTime.Instant" />.
            </summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.#ctor(NodaTime.Instant,NodaTime.DateTimeZone)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.ZonedDateTime" /> struct in the specified time zone
            and the ISO calendar.
            </summary>
      <param name="instant">The instant of time to represent.</param>
      <param name="zone">The time zone to represent the instant within.</param>
    </member>
    <member name="M:NodaTime.ZonedDateTime.#ctor(NodaTime.Instant,NodaTime.DateTimeZone,NodaTime.CalendarSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.ZonedDateTime" /> struct.
            </summary>
      <param name="calendar">The calendar system.</param>
      <param name="instant">The instant.</param>
      <param name="zone">The time zone.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="calendar" /> or <paramref name="zone" /> is <c>null</c>.</exception>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Add(NodaTime.ZonedDateTime,NodaTime.Duration)">
      <summary>
            Adds a duration to zoned date and time. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="zonedDateTime">The value to add the duration to.</param>
      <param name="duration">The duration to add</param>
      <returns>A new value with the time advanced by the given duration, in the same calendar system and time zone.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.CenturyOfEra">
      <summary>Gets the century within the era of this date and time.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.ClockHourOfHalfDay">
      <summary>Gets the hour of the half-day of this date and time, in the range 1 to 12 inclusive.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.DayOfMonth">
      <summary>
            Gets the day of this date and time within the month.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.DayOfWeek">
      <summary>
            Gets the week day of this date and time as a number.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.DayOfYear">
      <summary>Gets the day of this date and time within the year.</summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Era">
      <summary>Gets the era for this date and time.</summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.GetHashCode">
      <summary>
            Computes the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.HourOfDay">
      <summary>Gets the hour of day of this date and time, in the range 0 to 23 inclusive.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.IsoDayOfWeek">
      <summary>
            Gets the week day of this date and time expressed as an <see cref="T:NodaTime.IsoDayOfWeek" /> value,
            for calendars which use ISO days of the week.
            </summary>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
    </member>
    <member name="P:NodaTime.ZonedDateTime.LocalDateTime">
      <summary>
            Gets the local date and time represented by this zoned date and time. The returned <see cref="P:NodaTime.ZonedDateTime.LocalDateTime" />
            will have the same calendar system and return the same values for each of the calendar properties
            (Year, MonthOfYear and so on), but not be associated with any particular time zone.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.MillisecondOfDay">
      <summary>Gets the millisecond of this date and time within the day, in the range 0 to 86,399,999 inclusive.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.MillisecondOfSecond">
      <summary>Gets the millisecond of this date and time within the second, in the range 0 to 999 inclusive.</summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Minus(NodaTime.Duration)">
      <summary>
            Returns the result of subtracting a duration from this zoned date and time, for a fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="duration">The duration to subtract</param>
      <returns>A new <see cref="T:NodaTime.ZonedDateTime" /> representing the result of the subtraction.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.MinuteOfHour">
      <summary>Gets the minute of this date and time, in the range 0 to 59 inclusive.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.MonthOfYear">
      <summary>Gets the month of this date and time within the year.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Offset">
      <summary>Gets the offset of the local representation of this value from UTC.</summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_Addition(NodaTime.ZonedDateTime,NodaTime.Duration)">
      <summary>
            Returns a new ZonedDateTime with the time advanced by the given duration. Note that
            due to daylight saving time changes this may not advance the local time by the same amount.
            </summary>
      <param name="zonedDateTime">The ZonedDateTime to add the duration to.</param>
      <param name="duration">The duration to add.</param>
      <returns>A new value with the time advanced by the given duration, in the same calendar system and time zone.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_Equality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The first value to compare</param>
      <param name="right">The second value to compare</param>
      <returns>True if the two operands are equal according to <see cref="M:NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)" />; false otherwise</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_Inequality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The first value to compare</param>
      <param name="right">The second value to compare</param>
      <returns>False if the two operands are equal according to <see cref="M:NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)" />; true otherwise</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.Duration)">
      <summary>
            Returns a new ZonedDateTime with the duration subtracted. Note that
            due to daylight saving time changes this may not change the local time by the same amount.
            </summary>
      <param name="zonedDateTime">The value to subtract the duration from.</param>
      <param name="duration">The duration to subtract.</param>
      <returns>A new value with the time "rewound" by the given duration, in the same calendar system and time zone.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Plus(NodaTime.Duration)">
      <summary>
            Returns the result of adding a duration to this zoned date and time, for a fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="duration">The duration to add</param>
      <returns>A new <see cref="T:NodaTime.ZonedDateTime" /> representing the result of the addition.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.SecondOfDay">
      <summary>Gets the second of this date and time within the day, in the range 0 to 86,399 inclusive.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.SecondOfMinute">
      <summary>Gets the second of this date and time within the minute, in the range 0 to 59 inclusive.</summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Subtract(NodaTime.ZonedDateTime,NodaTime.Duration)">
      <summary>
            Subtracts a duration from zoned date and time. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="zonedDateTime">The value to subtract the duration from.</param>
      <param name="duration">The duration to subtract.</param>
      <returns>A new value with the time "rewound" by the given duration, in the same calendar system and time zone.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.TickOfDay">
      <summary>Gets the tick of this date and time within the day, in the range 0 to 863,999,999,999 inclusive.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.TickOfMillisecond">
      <summary>Gets the tick of this date and time within the millisecond, in the range 0 to 9,999 inclusive.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.TickOfSecond">
      <summary>Gets the tick of this local time within the second, in the range 0 to 9,999,999 inclusive.</summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToDateTimeOffset">
      <summary>
            Constructs a <see cref="T:System.DateTimeOffset" /> value with the same local time and offset from
            UTC as this value.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> representation of this value.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToDateTimeUnspecified">
      <summary>
            Constructs a <see cref="T:System.DateTime" /> from this ZonedDateTime which has a <see cref="P:System.DateTime.Kind" />
            of <see cref="F:System.DateTimeKind.Unspecified" /> and represents the same local time as this value
            rather than the same instant in time.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> representation of this value with an "unspecified" kind, with the same
            local date and time as this value.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToDateTimeUtc">
      <summary>
            Constructs a <see cref="T:System.DateTime" /> from this ZonedDateTime which has a <see cref="P:System.DateTime.Kind" />
            of <see cref="F:System.DateTimeKind.Utc" /> and represents the same instant of time as this value
            rather than the same local time.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> representation of this value with a "universal" kind, with the same
            instant of time as this value.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToInstant">
      <summary>
            Converts this value to the instant it represents on the time line.
            If two instants are represented by the same set of values, the later
            instant is returned.
            </summary>
      <returns>The instant corresponding to this value.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToString">
      <summary>
            Converts this date and time to text according to the default formatting for the culture.
            </summary>
      <returns>A text representation of this value.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.WeekOfWeekYear">
      <summary>Gets the week within the WeekYear. See <see cref="P:NodaTime.ZonedDateTime.WeekYear" /> for more details.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.WeekYear">
      <summary>
            Gets the "week year" of this date and time.
            </summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.WithZone(NodaTime.DateTimeZone)">
      <summary>
            Creates a new <see cref="T:NodaTime.ZonedDateTime" /> representing the same instant in time, in the
            same calendar but a different time zone.
            </summary>
      <param name="targetZone">The target time zone to convert to. Must not be null.</param>
      <returns>A new value in the target time zone.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Year">
      <summary>Gets the year of this date and time.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.YearOfCentury">
      <summary>Gets the year of this date and time within its century.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.YearOfEra">
      <summary>Gets the year of this date and time within its era.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Zone">
      <summary>Gets the time zone associated with this value.</summary>
    </member>
    <member name="T:NodaTime.Calendars.Era">
      <summary>
            Represents an era in a calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.AnnoHegirae">
      <summary>
            The "Anno Hegira" era. This is the sole era used by the Hijri (Islamic) calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.AnnoMartyrm">
      <summary>
            The 'Anno Martyrum' or 'Era of the Martyrs'. This is the sole era in the Coptic calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.BeforeCommon">
      <summary>
            The "before common" era (BCE), also known as Before Christ (BC). This is used in the ISO, Gregorian and Julian calendars.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.Buddhist">
      <summary>
            Sole era used by the Buddhist calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.Common">
      <summary>
            The "Common" era (CE), also known as Anno Domini (AD). This is used in the ISO, Gregorian and Julian calendars.
            </summary>
    </member>
    <member name="P:NodaTime.Calendars.Era.Name">
      <summary>
            Returns the name of this era, e.g. "CE" or "BCE".
            </summary>
    </member>
    <member name="M:NodaTime.Calendars.Era.ToString">
      <summary>
            Returns the name of this era.
            </summary>
      <returns>The name of this era.</returns>
    </member>
    <member name="T:NodaTime.Calendars.IslamicEpoch">
      <summary>
            The epoch to use when constructing an Islamic calendar. The calendar can be based with year 1
            starting on July 15th 622CE (in the Julian calendar) or the following day.
            The former is the "astronomical" or "Thursday" epoch; the latter is the "civil" or "Friday" epoch.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicEpoch.Astronomical">
      <summary>
            Epoch beginning on July 15th 622CE (Julian).
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicEpoch.Civil">
      <summary>
            Epoch beginning on July 16th 622CE (Julian).
            </summary>
    </member>
    <member name="T:NodaTime.Calendars.IslamicLeapYearPattern">
      <summary>
            The Islamic or Hijri calendar is defined in either observational or tabular terms;
            Noda Time implements a tabular calendar where a pattern of leap years repeats every 30
            years, according to one of the patterns within this enum. See <see cref="M:NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern,NodaTime.Calendars.IslamicEpoch)" />
            for more detail.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicLeapYearPattern.Base15">
      <summary>
            A pattern of leap years in 2, 5, 7, 10, 13, 15, 18, 21, 24, 26 and 29.
            This pattern and <see cref="F:NodaTime.Calendars.IslamicLeapYearPattern.Base16" /> are the most commonly used ones,
            and only differ in whether the 15th or 16th year is deemed leap.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicLeapYearPattern.Base16">
      <summary>
            A pattern of leap years in 2, 5, 7, 10, 13, 16, 18, 21, 24, 26 and 29.
            This pattern and <see cref="F:NodaTime.Calendars.IslamicLeapYearPattern.Base15" /> are the most commonly used ones,
            and only differ in whether the 15th or 16th year is deemed leap.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicLeapYearPattern.Indian">
      <summary>
            A pattern of leap years in 2, 5, 8, 10, 13, 16, 19, 21, 24, 27 and 29.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicLeapYearPattern.HabashAlHasib">
      <summary>
            A pattern of leap years in 2, 5, 8, 11, 13, 16, 19, 21, 24, 27 and 30.
            </summary>
    </member>
    <member name="T:NodaTime.Globalization.NodaCultureInfo">
      <summary>
              Provides wrapper around a <see cref="T:System.Globalization.CultureInfo" /> that supports NodaTime formatting information. This allows
              for the <see cref="P:NodaTime.Globalization.NodaCultureInfo.NodaFormatInfo" /> data to be set into the <see cref="P:System.Threading.Thread.CurrentCulture" />
              so it does not have to be passed around. If the underlying culture info is read only then this is also
              read only. To change it you need to clone it first.
            </summary>
    </member>
    <member name="M:NodaTime.Globalization.NodaCultureInfo.#ctor(System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:NodaTime.Globalization.NodaCultureInfo" /> class.
            </summary>
      <param name="culture">A predefined <see cref="T:System.Globalization.CultureInfo" /> identifier, <see cref="P:System.Globalization.CultureInfo.LCID" /> property of an existing <see cref="T:System.Globalization.CultureInfo" /> object, or Windows-only culture identifier.</param>
    </member>
    <member name="M:NodaTime.Globalization.NodaCultureInfo.#ctor(System.Int32,System.Boolean)">
      <summary>
              Initializes a new instance of the <see cref="T:NodaTime.Globalization.NodaCultureInfo" /> class.
            </summary>
      <param name="culture">A predefined <see cref="T:System.Globalization.CultureInfo" /> identifier, <see cref="P:System.Globalization.CultureInfo.LCID" /> property of an existing <see cref="T:System.Globalization.CultureInfo" /> object, or Windows-only culture identifier.</param>
      <param name="useUserOverride">A Boolean that denotes whether to use the user-selected culture settings (true) or the default culture settings (false).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="culture" /> is less than zero.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="culture" /> is not a valid culture identifier.
              -or-
              In .NET Compact Framework applications, <paramref name="culture" /> is not supported by the operating system of the device.
            </exception>
    </member>
    <member name="M:NodaTime.Globalization.NodaCultureInfo.#ctor(System.String)">
      <summary>
              Initializes a new instance of the <see cref="T:NodaTime.Globalization.NodaCultureInfo" /> class.
            </summary>
      <param name="name">The name of the base culture.</param>
    </member>
    <member name="M:NodaTime.Globalization.NodaCultureInfo.#ctor(System.String,System.Boolean)">
      <summary>
              Initializes a new instance of the <see cref="T:NodaTime.Globalization.NodaCultureInfo" /> class.
            </summary>
      <param name="name">The name of the base culture.</param>
      <param name="useUserOverride">A Boolean that denotes whether to use the user-selected culture settings (true) or the default culture settings (false).</param>
    </member>
    <member name="M:NodaTime.Globalization.NodaCultureInfo.Clone">
      <summary>
            Creates a copy of the current <see cref="T:System.Globalization.CultureInfo" />.
            </summary>
      <returns>
            A copy of the current <see cref="T:System.Globalization.CultureInfo" />.
            </returns>
    </member>
    <member name="M:NodaTime.Globalization.NodaCultureInfo.GetCultureInfo(System.Int32)">
      <summary>
            Gets the culture info for a specified culture identifier.
            </summary>
      <param name="culture">The culture identifier to build a <see cref="T:NodaTime.Globalization.NodaCultureInfo" /> for.</param>
      <returns>A new <see cref="T:NodaTime.Globalization.NodaCultureInfo" /> for the culture with the given name.</returns>
    </member>
    <member name="M:NodaTime.Globalization.NodaCultureInfo.GetCultureInfo(System.String)">
      <summary>
            Gets the culture info for a specified culture name.
            </summary>
      <param name="name">The culture name to build a <see cref="T:NodaTime.Globalization.NodaCultureInfo" /> for.</param>
      <returns>A new <see cref="T:NodaTime.Globalization.NodaCultureInfo" /> for the culture with the given name.</returns>
    </member>
    <member name="M:NodaTime.Globalization.NodaCultureInfo.GetFormat(System.Type)">
      <summary>
              Gets an object that defines how to format the specified type.
            </summary>
      <param name="formatType">The <see cref="T:System.Type" /> for which to get a formatting object. This method only supports the <see cref="T:System.Globalization.NumberFormatInfo" /> and <see cref="T:System.Globalization.DateTimeFormatInfo" /> types.</param>
      <returns>
              The value of the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property, which is a <see cref="T:System.Globalization.NumberFormatInfo" /> containing the default number format information for the current <see cref="T:System.Globalization.CultureInfo" />, if <paramref name="formatType" /> is the <see cref="T:System.Type" /> object for the <see cref="T:System.Globalization.NumberFormatInfo" /> class.
              -or-
              The value of the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, which is a <see cref="T:System.Globalization.DateTimeFormatInfo" /> containing the default date and time format information for the current <see cref="T:System.Globalization.CultureInfo" />, if <paramref name="formatType" /> is the <see cref="T:System.Type" /> object for the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class.
              -or-
              null, if <paramref name="formatType" /> is any other object.
            </returns>
    </member>
    <member name="P:NodaTime.Globalization.NodaCultureInfo.InvariantCulture">
      <summary>
              Gets the invariant culture.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaCultureInfo.NodaFormatInfo">
      <summary>
              Gets or sets the noda format info of this object.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaCultureInfo.Parent">
      <summary>
              Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the parent culture of the current
              <see cref="T:System.Globalization.CultureInfo" />.
            </summary>
      <returns>
              The <see cref="T:System.Globalization.CultureInfo" /> that represents the parent culture of the current
              <see cref="T:System.Globalization.CultureInfo" />.
            </returns>
    </member>
    <member name="M:NodaTime.Globalization.NodaCultureInfo.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:NodaTime.Globalization.NodaFormatInfo">
      <summary>
            Defines how NodaTime values are formatted and displayed, depending on the culture.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.AMDesignator">
      <summary>
            Gets the AM designator.
            </summary>
    </member>
    <member name="M:NodaTime.Globalization.NodaFormatInfo.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>A writable clone of this value.</returns>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.CultureInfo">
      <summary>
            Gets the culture info associated with this format provider.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.CurrentInfo">
      <summary>
            Gets the <see cref="T:NodaTime.Globalization.NodaFormatInfo" /> object for the current thread.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.DateSeparator">
      <summary>
            Gets the date separator.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.DateTimeFormat">
      <summary>
            Gets or sets the date time format.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.DecimalSeparator">
      <summary>
            Gets the decimal separator from the number format associated with this provider.
            </summary>
    </member>
    <member name="M:NodaTime.Globalization.NodaFormatInfo.GetEraNames(NodaTime.Calendars.Era)">
      <summary>
            Returns the names for the given era in this culture.
            </summary>
      <param name="era">The era to find the names of.</param>
      <returns>A read-only list of names for the given era, or an empty list if
            the era is not known in this culture.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="era" /> is null.</exception>
    </member>
    <member name="M:NodaTime.Globalization.NodaFormatInfo.GetEraPrimaryName(NodaTime.Calendars.Era)">
      <summary>
            Returns the primary name for the given era in this culture.
            </summary>
      <param name="era">The era to find the primary name of.</param>
      <returns>The primary name for the given era, or an empty string if the era name is not known.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="era" /> is null.</exception>
    </member>
    <member name="M:NodaTime.Globalization.NodaFormatInfo.GetFormat(System.Type)">
      <summary>
              Returns an object that provides formatting services for the specified type.
            </summary>
      <param name="formatType">An object that specifies the type of format object to return.</param>
      <returns>
              An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" />
              implementation can supply that type of object; otherwise, null.
            </returns>
    </member>
    <member name="M:NodaTime.Globalization.NodaFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>
              Gets the <see cref="T:NodaTime.Globalization.NodaFormatInfo" /> for the given <see cref="T:System.IFormatProvider" />. If the
              format provider is <c>null</c> or if it does not provide a <see cref="T:NodaTime.Globalization.NodaFormatInfo" />
              object then the format object for the current thread is returned.
            </summary>
      <param name="provider">The <see cref="T:System.IFormatProvider" />.</param>
      <returns>The <see cref="T:NodaTime.Globalization.NodaFormatInfo" />. Will next be <c>null.</c></returns>
    </member>
    <member name="F:NodaTime.Globalization.NodaFormatInfo.InvariantInfo">
      <summary>
            A NodaFormatInfo wrapping the invariant culture.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.IsReadOnly">
      <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.LongDayNames">
      <summary>
            Returns a read-only list of the names of the days of the week for the default calendar for this culture.
            See the usage guide for caveats around the use of these names for other calendars.
            Element 0 of the list is null, and the other elements correspond with the index values returned from
            <see cref="P:NodaTime.LocalDateTime.DayOfWeek" /> and similar properties.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.LongMonthGenitiveNames">
      <summary>
            Returns a read-only list of the names of the months for the default calendar for this culture.
            See the usage guide for caveats around the use of these names for other calendars.
            Element 0 of the list is null, to allow a more natural mapping from (say) 1 to the string "January".
            The genitive form is used for month text where the day of month also appears in the pattern.
            If the culture does not use genitive month names, this property will return the same reference as
            <see cref="P:NodaTime.Globalization.NodaFormatInfo.LongMonthNames" />.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.LongMonthNames">
      <summary>
            Returns a read-only list of the names of the months for the default calendar for this culture.
            See the usage guide for caveats around the use of these names for other calendars.
            Element 0 of the list is null, to allow a more natural mapping from (say) 1 to the string "January".
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.Name">
      <summary>
            Name of the culture providing this formatting information.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.NegativeSign">
      <summary>
            Gets the negative sign.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.NumberFormat">
      <summary>
            Gets or sets the number format. This is usually initialized from the <see cref="P:NodaTime.Globalization.NodaFormatInfo.CultureInfo" />, but may be
            changed indepedently.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.OffsetPatternFull">
      <summary>
            Gets or sets the <see cref="T:NodaTime.Offset" /> "F" pattern.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.OffsetPatternLong">
      <summary>
            Gets or sets the <see cref="T:NodaTime.Offset" /> "L" pattern.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.OffsetPatternMedium">
      <summary>
            Gets or sets the <see cref="T:NodaTime.Offset" /> "M" pattern.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.OffsetPatternShort">
      <summary>
              Gets or sets the <see cref="T:NodaTime.Offset" /> "S" pattern.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.PMDesignator">
      <summary>
            Gets the PM designator.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.PositiveSign">
      <summary>
              Gets the positive sign.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.ShortDayNames">
      <summary>
            Returns a read-only list of the abbreviated names of the days of the week for the default calendar for this culture.
            See the usage guide for caveats around the use of these names for other calendars.
            Element 0 of the list is null, and the other elements correspond with the index values returned from
            <see cref="P:NodaTime.LocalDateTime.DayOfWeek" /> and similar properties.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.ShortMonthGenitiveNames">
      <summary>
            Returns a read-only list of the abbreviated names of the months for the default calendar for this culture.
            See the usage guide for caveats around the use of these names for other calendars.
            Element 0 of the list is null, to allow a more natural mapping from (say) 1 to the string "Jan".
            The genitive form is used for month text where the day also appears in the pattern.
            If the culture does not use genitive month names, this property will return the same reference as
            <see cref="P:NodaTime.Globalization.NodaFormatInfo.ShortMonthNames" />.
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.ShortMonthNames">
      <summary>
            Returns a read-only list of the abbreviated names of the months for the default calendar for this culture.
            See the usage guide for caveats around the use of these names for other calendars.
            Element 0 of the list is null, to allow a more natural mapping from (say) 1 to the string "Jan".
            </summary>
    </member>
    <member name="P:NodaTime.Globalization.NodaFormatInfo.TimeSeparator">
      <summary>
            Gets the time separator.
            </summary>
    </member>
    <member name="M:NodaTime.Globalization.NodaFormatInfo.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:NodaTime.Text.InstantPattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.Instant" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.Create(System.String,NodaTime.Globalization.NodaFormatInfo)">
      <summary>
            Creates a pattern for the given pattern text and format info.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="formatInfo">Localization information</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.CreateNumericPattern(NodaTime.Globalization.NodaFormatInfo,System.Boolean)">
      <summary>
            Creates a "numeric" pattern for the given format information. The numeric format gives the
            number of ticks in decimal format, with or without thousands separators.
            </summary>
      <param name="formatInfo">The culture-specific information to use when formatting or parsing.</param>
      <param name="includeThousandsSeparators">True to include thousands separators when parsing or formatting; false to omit them.</param>
      <returns>A numeric pattern for the configuration</returns>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.CreateWithInvariantInfo(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.Format(NodaTime.Instant)">
      <summary>
            Formats the given instant as text according to the rules of this pattern.
            </summary>
      <param name="value">The offset to format.</param>
      <returns>The instant formatted according to this pattern.</returns>
    </member>
    <member name="P:NodaTime.Text.InstantPattern.FormatInfo">
      <summary>
            Returns the localization information used in this pattern.
            </summary>
    </member>
    <member name="F:NodaTime.Text.InstantPattern.GeneralPattern">
      <summary>
            The general pattern, which always uses an invariant culture. The general pattern represents
            an instant as a UTC date/time in ISO-8601 style "yyyy-MM-ddTHH:mm:ssZ".
            </summary>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.InstantPattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture information.</returns>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.WithFormatInfo(NodaTime.Globalization.NodaFormatInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            localization information.
            </summary>
      <param name="formatInfo">The localization information to use in the new pattern.</param>
      <returns>A new pattern with the given localization information.</returns>
    </member>
    <member name="T:NodaTime.Text.InvalidPatternException">
      <summary>
            Exception thrown to indicate that the format pattern provided for either formatting or parsing is invalid.
            </summary>
    </member>
    <member name="M:NodaTime.Text.InvalidPatternException.#ctor">
      <summary>
            Creates a new InvalidPatternException with no message.
            </summary>
    </member>
    <member name="M:NodaTime.Text.InvalidPatternException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new InvalidPatternException from the given serialization information.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:NodaTime.Text.InvalidPatternException.#ctor(System.String)">
      <summary>
            Creates a new InvalidPatternException with the given message.
            </summary>
      <param name="message">A message describing the nature of the failure</param>
    </member>
    <member name="T:NodaTime.Text.IPattern`1">
      <summary>
            Generic interface supporting parsing and formatting. Parsing always results in a 
            <see cref="T:NodaTime.Text.ParseResult`1" /> which can represent success or failure.
            </summary>
      <typeparam name="T">Type of value to parse or format.</typeparam>
    </member>
    <member name="M:NodaTime.Text.IPattern`1.Format(`0)">
      <summary>
            Formats the given value as text according to the rules of this pattern.
            </summary>
      <param name="value">The value to format.</param>
      <returns>The value formatted according to this pattern.</returns>
    </member>
    <member name="M:NodaTime.Text.IPattern`1.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="T:NodaTime.Text.LocalDatePattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.LocalDate" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.Create(System.String,NodaTime.Globalization.NodaFormatInfo)">
      <summary>
            Creates a pattern for the given pattern text and format info, with a template value of midnight.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="formatInfo">Localization information</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.Create(System.String,NodaTime.Globalization.NodaFormatInfo,NodaTime.LocalDate)">
      <summary>
            Creates a pattern for the given pattern text, format info, and template value.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="formatInfo">Localization information</param>
      <param name="templateValue">Template value to use for unspecified fields</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.CreateWithInvariantInfo(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.Format(NodaTime.LocalDate)">
      <summary>
            Formats the given local time as text according to the rules of this pattern.
            </summary>
      <param name="value">The local time to format.</param>
      <returns>The local time formatted according to this pattern.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalDatePattern.FormatInfo">
      <summary>
            Returns the localization information used in this pattern.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalDatePattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="P:NodaTime.Text.LocalDatePattern.TemplateValue">
      <summary>
            Returns the value used as a template for parsing: any field values unspecified
            in the pattern are taken from the template.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture information.</returns>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.WithFormatInfo(NodaTime.Globalization.NodaFormatInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            localization information.
            </summary>
      <param name="newFormatInfo">The localization information to use in the new pattern.</param>
      <returns>A new pattern with the given localization information.</returns>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.WithTemplateValue(NodaTime.LocalDate)">
      <summary>
            Creates a pattern like this one, but with the specified template value.
            </summary>
      <param name="newTemplateValue">The template value for the new pattern, used to fill in unspecified fields.</param>
      <returns>A new pattern with the given template value.</returns>
    </member>
    <member name="T:NodaTime.Text.LocalDateTimePattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.LocalDateTime" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.Create(System.String,NodaTime.Globalization.NodaFormatInfo)">
      <summary>
            Creates a pattern for the given pattern text and format info, with a template value of midnight.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="formatInfo">Localization information</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.Create(System.String,NodaTime.Globalization.NodaFormatInfo,NodaTime.LocalDateTime)">
      <summary>
            Creates a pattern for the given pattern text, format info, and template value.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="formatInfo">Localization information</param>
      <param name="templateValue">Template value to use for unspecified fields</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.CreateWithInvariantInfo(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.Format(NodaTime.LocalDateTime)">
      <summary>
            Formats the given local time as text according to the rules of this pattern.
            </summary>
      <param name="value">The local time to format.</param>
      <returns>The local time formatted according to this pattern.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalDateTimePattern.FormatInfo">
      <summary>
            Returns the localization information used in this pattern.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalDateTimePattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="P:NodaTime.Text.LocalDateTimePattern.TemplateValue">
      <summary>
            Returns the value used as a template for parsing: any field values unspecified
            in the pattern are taken from the template.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture information.</returns>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.WithFormatInfo(NodaTime.Globalization.NodaFormatInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            localization information.
            </summary>
      <param name="newFormatInfo">The localization information to use in the new pattern.</param>
      <returns>A new pattern with the given localization information.</returns>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.WithTemplateValue(NodaTime.LocalDateTime)">
      <summary>
            Creates a pattern like this one, but with the specified template value.
            </summary>
      <param name="newTemplateValue">The template value for the new pattern, used to fill in unspecified fields.</param>
      <returns>A new pattern with the given template value.</returns>
    </member>
    <member name="T:NodaTime.Text.LocalTimePattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.LocalTime" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.Create(System.String,NodaTime.Globalization.NodaFormatInfo)">
      <summary>
            Creates a pattern for the given pattern text and format info, with a template value of midnight.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="formatInfo">Localization information</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.Create(System.String,NodaTime.Globalization.NodaFormatInfo,NodaTime.LocalTime)">
      <summary>
            Creates a pattern for the given pattern text, format info, and template value.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="formatInfo">Localization information</param>
      <param name="templateValue">Template value to use for unspecified fields</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.CreateWithInvariantInfo(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.Format(NodaTime.LocalTime)">
      <summary>
            Formats the given local time as text according to the rules of this pattern.
            </summary>
      <param name="value">The local time to format.</param>
      <returns>The local time formatted according to this pattern.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalTimePattern.FormatInfo">
      <summary>
            Returns the localization information used in this pattern.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalTimePattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="P:NodaTime.Text.LocalTimePattern.TemplateValue">
      <summary>
            Returns the value used as a template for parsing: any field values unspecified
            in the pattern are taken from the template.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture information.</returns>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.WithFormatInfo(NodaTime.Globalization.NodaFormatInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            localization information.
            </summary>
      <param name="newFormatInfo">The localization information to use in the new pattern.</param>
      <returns>A new pattern with the given localization information.</returns>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.WithTemplateValue(NodaTime.LocalTime)">
      <summary>
            Creates a pattern like this one, but with the specified template value.
            </summary>
      <param name="newTemplateValue">The template value for the new pattern, used to fill in unspecified fields.</param>
      <returns>A new pattern with the given template value.</returns>
    </member>
    <member name="T:NodaTime.Text.OffsetPattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.Offset" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.Create(System.String,NodaTime.Globalization.NodaFormatInfo)">
      <summary>
            Creates a pattern for the given pattern text and format info.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="formatInfo">Localization information</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.CreateWithInvariantInfo(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.Format(NodaTime.Offset)">
      <summary>
            Formats the given offset as text according to the rules of this pattern.
            </summary>
      <param name="value">The offset to format.</param>
      <returns>The offset formatted according to this pattern.</returns>
    </member>
    <member name="P:NodaTime.Text.OffsetPattern.FormatInfo">
      <summary>
            Returns the localization information used in this pattern.
            </summary>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.OffsetPattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture information.</returns>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.WithFormatInfo(NodaTime.Globalization.NodaFormatInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            localization information.
            </summary>
      <param name="formatInfo">The localization information to use in the new pattern.</param>
      <returns>A new pattern with the given localization information.</returns>
    </member>
    <member name="T:NodaTime.Text.ParseResult`1">
      <summary>
            The result of a parse operation. 
            </summary>
      <typeparam name="T">The type which was parsed, such as a <see cref="T:NodaTime.LocalDateTime" />.</typeparam>
    </member>
    <member name="M:NodaTime.Text.ParseResult`1.GetValueOrThrow">
      <summary>
            Returns the value from the parse operation if it was successful, or throws an exception indicating the parse failure
            otherwise.
            </summary>
      <returns>The result of the parsing operation if it was successsful.</returns>
    </member>
    <member name="P:NodaTime.Text.ParseResult`1.Success">
      <summary>
            Indicates whether the parse operation was successful.
            </summary>
    </member>
    <member name="M:NodaTime.Text.ParseResult`1.TryGetValue(`0,`0@)">
      <summary>
            Returns the success value, and sets the out parameter to either
            the specified failure value of T or the successful parse result value.
            </summary>
      <param name="failureValue">The "default" value to set in <paramref name="result" /> if parsing failed.</param>
      <param name="result">The parameter to store the parsed value in on success.</param>
      <returns>True if this parse result was successful, or false otherwise.</returns>
    </member>
    <member name="P:NodaTime.Text.ParseResult`1.Value">
      <summary>
            Returns the value from the parse operation if it was successful, or throws an exception indicating the parse failure
            otherwise.
            </summary>
      <returns>The result of the parsing operation if it was successsful.</returns>
    </member>
    <member name="T:NodaTime.Text.UnparsableValueException">
      <summary>
            Exception thrown to indicate that the specified value could not be parsed.
            </summary>
    </member>
    <member name="M:NodaTime.Text.UnparsableValueException.#ctor">
      <summary>
            Creates a new UnparsableValueException with no message.
            </summary>
    </member>
    <member name="M:NodaTime.Text.UnparsableValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new UnparsableValueException from the given serialization information.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:NodaTime.Text.UnparsableValueException.#ctor(System.String)">
      <summary>
            Creates a new UnparsableValueException with the given message.
            </summary>
      <param name="message">The failure message</param>
    </member>
    <member name="T:NodaTime.TimeZones.BclTimeZone">
      <summary>
            Representation of a time zone converted from a <see cref="T:System.TimeZoneInfo" /> from the Base Class Library.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.BclTimeZone.DisplayName">
      <summary>
            Returns the display name associated with the time zone, as provided by the Base Class Library.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.BclTimeZone.FromTimeZoneInfo(System.TimeZoneInfo)">
      <summary>
            Creates a new <see cref="T:NodaTime.TimeZones.BclTimeZone" /> from a <see cref="T:System.TimeZoneInfo" /> from the Base Class Library.
            </summary>
      <param name="bclZone">The original time zone to take information from; must not be null.</param>
      <returns>A Noda Time representation of the given time zone.</returns>
    </member>
    <member name="M:NodaTime.TimeZones.BclTimeZone.GetZoneInterval(NodaTime.Instant)">
      <summary>
            Returns the zone interval for the given instant in time. See <see cref="T:NodaTime.ZonedDateTime" /> for more details.
            </summary>
      <param name="instant">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="instant"/&gt; documentation for "M:NodaTime.TimeZones.BclTimeZone.GetZoneInterval(NodaTime.Instant)"]</p>
      </param>
      <returns>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:NodaTime.TimeZones.BclTimeZone.GetZoneInterval(NodaTime.Instant)"]</p>
      </returns>
    </member>
    <member name="P:NodaTime.TimeZones.BclTimeZone.OriginalZone">
      <summary>
            Returns the original <see cref="T:System.TimeZoneInfo" /> from which this was created.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.BclTimeZoneProvider">
      <summary>
            An <see cref="T:NodaTime.TimeZones.IDateTimeZoneProvider" /> implementation which uses <see cref="T:System.TimeZoneInfo" /> from
            .NET 3.5 and later.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.BclTimeZoneProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:NodaTime.TimeZones.BclTimeZoneProvider" /> class</summary>
    </member>
    <member name="M:NodaTime.TimeZones.BclTimeZoneProvider.ForId(System.String)">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:NodaTime.TimeZones.BclTimeZoneProvider.ForId(System.String)"]</p>
      </summary>
      <param name="id">The ID of the system time zone to convert</param>
      <returns>The Noda Time representation of the given Windows system time zone</returns>
      <exception cref="T:System.ArgumentException">The given zone doesn't exist</exception>
    </member>
    <member name="P:NodaTime.TimeZones.BclTimeZoneProvider.Ids">
      <summary>
            Returns the IDs of all system time zones.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.BclTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)">
      <summary>
            Maps the BCL ID to "our" ID as an identity projection.
            </summary>
      <param name="timeZone">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="timeZone"/&gt; documentation for "M:NodaTime.TimeZones.BclTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)"]</p>
      </param>
      <returns>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:NodaTime.TimeZones.BclTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)"]</p>
      </returns>
    </member>
    <member name="P:NodaTime.TimeZones.BclTimeZoneProvider.VersionId">
      <summary>
            Returns version information corresponding to the version of the assembly
            containing <see cref="T:System.TimeZoneInfo" />.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.EmptyDateTimeZoneProvider">
      <summary>
            Time zone provider which never provides any time zones. Setting this as the provider
            for the system will effectively mean that only UTC is recognized.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.EmptyDateTimeZoneProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:NodaTime.TimeZones.EmptyDateTimeZoneProvider" /> class</summary>
    </member>
    <member name="M:NodaTime.TimeZones.EmptyDateTimeZoneProvider.ForId(System.String)">
      <summary>
            Always throws <see cref="T:System.InvalidOperationException" /> as no time zones are supported.
            (A provider should not be asked for time zones it doesn't support.)
            </summary>
      <param name="id">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="id"/&gt; documentation for "M:NodaTime.TimeZones.EmptyDateTimeZoneProvider.ForId(System.String)"]</p>
      </param>
      <returns>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:NodaTime.TimeZones.EmptyDateTimeZoneProvider.ForId(System.String)"]</p>
      </returns>
    </member>
    <member name="P:NodaTime.TimeZones.EmptyDateTimeZoneProvider.Ids">
      <summary>
            Always returns an empty array.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.EmptyDateTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)">
      <summary>
            Always maps any time zone to null.
            </summary>
      <param name="timeZone">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="timeZone"/&gt; documentation for "M:NodaTime.TimeZones.EmptyDateTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)"]</p>
      </param>
      <returns>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:NodaTime.TimeZones.EmptyDateTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)"]</p>
      </returns>
    </member>
    <member name="P:NodaTime.TimeZones.EmptyDateTimeZoneProvider.VersionId">
      <summary>
            Returns a version identifier for this provider.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.IDateTimeZoneProvider">
      <summary>
            Provides the interface for objects that can retrieve time zone definitions given and id.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.IDateTimeZoneProvider.ForId(System.String)">
      <summary>
            Returns the time zone definition associated with the given id.
            </summary>
      <param name="id">The id of the time zone to return. This will be one of the IDs
            returned by the <see cref="P:NodaTime.TimeZones.IDateTimeZoneProvider.Ids" /> property.</param>
      <returns>The <see cref="T:NodaTime.DateTimeZone" /> for the given ID; must not be null.</returns>
    </member>
    <member name="P:NodaTime.TimeZones.IDateTimeZoneProvider.Ids">
      <summary>
            Returns an enumeration of the available ids from this provider. The order in which the
            values are returned is irrelevant, as the time zone cache will sort them anyway. The sequence
            returned may be empty, but must not be null.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.IDateTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)">
      <summary>
            Returns this provider's corresponding ID for the given time zone.
            </summary>
      <param name="timeZone">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="timeZone"/&gt; documentation for "M:NodaTime.TimeZones.IDateTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)"]</p>
      </param>
      <returns>
            The ID for the system default time zone for this provider, or null if the default time
            zone has no mapping in this provider.
            </returns>
    </member>
    <member name="P:NodaTime.TimeZones.IDateTimeZoneProvider.VersionId">
      <summary>
            Returns an appropriate version ID for diagnostic purposes. This doesn't have any specific format;
            it's solely for diagnostic purposes. For example, the default provider returns a string such as
            "TZDB: 2011n" indicating where the information comes from and which version of that information
            it's loaded.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.TzdbTimeZoneProvider">
      <summary>
            Provides an implementation of a <see cref="T:NodaTime.TimeZones.IDateTimeZoneProvider" /> that looks
            for its time zone definitions from a named resource in an assembly.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbTimeZoneProvider.#ctor(System.Resources.ResourceManager)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.TimeZones.TzdbTimeZoneProvider" /> class.
            </summary>
      <param name="source">The <see cref="T:System.Resources.ResourceManager" /> to search for the time zone resources.</param>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbTimeZoneProvider.#ctor(System.Resources.ResourceSet)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.TimeZones.TzdbTimeZoneProvider" /> class.
            </summary>
      <param name="source">The <see cref="T:System.Resources.ResourceSet" /> to search for the time zone resources.</param>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbTimeZoneProvider.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.TimeZones.TzdbTimeZoneProvider" /> class.
            </summary>
      <param name="baseName">GetName of the base.</param>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbTimeZoneProvider.#ctor(System.String,System.Reflection.Assembly)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.TimeZones.TzdbTimeZoneProvider" /> class.
            </summary>
      <param name="baseName">GetName of the base.</param>
      <param name="assembly">The assembly to search for the time zone resources.</param>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbTimeZoneProvider.ForId(System.String)">
      <summary>
            Returns the time zone definition associated with the given id.
            </summary>
      <param name="id">The id of the time zone to return.</param>
      <returns>
            The <see cref="T:NodaTime.DateTimeZone" /> or <c>null</c> if there is no time zone with the given id.
            </returns>
    </member>
    <member name="F:NodaTime.TimeZones.TzdbTimeZoneProvider.IdMapKey">
      <summary>
            The key used to find ID mappings within the resource. Deliberately
            uses an unscore which would be normalized away if this were a time zone name.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbTimeZoneProvider.Ids">
      <summary>
            Returns a sequence of the available IDs from this provider.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)">
      <summary>
            Attempts to map the system time zone to a zoneinfo ID, and return that ID.
            </summary>
      <param name="zone">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="zone"/&gt; documentation for "M:NodaTime.TimeZones.TzdbTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)"]</p>
      </param>
      <returns>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:NodaTime.TimeZones.TzdbTimeZoneProvider.MapTimeZoneId(System.TimeZoneInfo)"]</p>
      </returns>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbTimeZoneProvider.VersionId">
      <summary>
            Returns a version identifier for this provider.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.TzdbTimeZoneProvider.VersionKey">
      <summary>
            The key used to find the TZDB version ID within the resource. Deliberately
            uses an unscore which would be normalized away if this were a time zone name.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.TzdbTimeZoneProvider.WindowsToPosixMapKey">
      <summary>
            The key used to find the Windows to TZDB ID mappings.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.TzdbTimeZoneProvider.WindowsToPosixMapVersionKey">
      <summary>
            The key used to find the Windows to TZDB ID version.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.ZoneInterval">
      <summary>
            Represents a range of time for which a particular Offset applies.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.#ctor(System.String,NodaTime.Instant,NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)">
      <summary>
              Initializes a new instance of the <see cref="T:NodaTime.TimeZones.ZoneInterval" /> class.
            </summary>
      <param name="name">The name of this offset period (e.g. PST or PDT).</param>
      <param name="start">The first <see cref="T:NodaTime.Instant" /> that the <paramref name="wallOffset" /> applies.</param>
      <param name="end">The last <see cref="T:NodaTime.Instant" /> (exclusive) that the <paramref name="wallOffset" /> applies.</param>
      <param name="wallOffset">The <see cref="P:NodaTime.TimeZones.ZoneInterval.WallOffset" /> from UTC for this period including any daylight savings.</param>
      <param name="savings">The <see cref="P:NodaTime.TimeZones.ZoneInterval.WallOffset" /> daylight savings contribution to the offset.</param>
      <exception cref="T:System.ArgumentException">If <c><paramref name="start" /> &gt;= <paramref name="end" /></c>.</exception>
      <exception cref="T:System.ArgumentNullException">If the <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.Contains(NodaTime.Instant)">
      <summary>
              Determines whether this period contains the given Instant in its range.
            </summary>
      <param name="instant">The instant to test.</param>
      <returns>
        <c>true</c> if this period contains the given Instant in its range; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.Duration">
      <summary>
              Gets the duration of this period.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.End">
      <summary>
              Gets the last Instant (exclusive) that the Offset applies.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval)">
      <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.
            </param>
      <returns>
              true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.Equals(System.Object)">
      <summary>
              Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.GetHashCode">
      <summary>
              Serves as a hash function for a particular type.
            </summary>
      <returns>
              A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.IsoLocalEnd">
      <summary>
            Returns the local start time of the interval, as LocalDateTime
            in the ISO calendar. This does not include any daylight saving 
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.IsoLocalStart">
      <summary>
            Returns the local start time of the interval, as LocalDateTime
            in the ISO calendar.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.Name">
      <summary>
              Gets the name of this offset period (e.g. PST or PDT).
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.Savings">
      <summary>
              Gets the daylight savings value for this period.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.StandardOffset">
      <summary>
              Gets the standard offset for this period. This is the offset without any daylight savings
              contributions.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.Start">
      <summary>
              Gets the first Instant that the Offset applies.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.WallOffset">
      <summary>
              Gets the offset from UTC for this period. This includes any daylight savings value.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.ZoneLocalMapping">
      <summary>
            Complete information about the mapping from a local date and time within a time zone. This is usually
            obtained from a call to <see cref="M:NodaTime.DateTimeZone.MapLocalDateTime(NodaTime.LocalDateTime)" /></summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.EarlierMapping">
      <summary>
            In an ambiguous mapping, returns the earlier of the two ZonedDateTimes which map to the original LocalDateTime.
            </summary>
      <exception cref="T:System.InvalidOperationException">The mapping isn't ambiguous.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.LaterMapping">
      <summary>
            In an ambiguous mapping, returns the later of the two ZonedDateTimes which map to the original LocalDateTime.
            </summary>
      <exception cref="T:System.InvalidOperationException">The mapping isn't ambiguous.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.Type">
      <summary>
            Returns the type of this result, which will always be one of the values defined in the
            <see cref="T:NodaTime.TimeZones.ZoneLocalMapping.ResultType" /> enum.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.UnambiguousMapping">
      <summary>
            In an unambiguous mapping, returns the sole ZonedDateTime which maps to the original LocalDateTime.
            </summary>
      <exception cref="T:System.InvalidOperationException">The mapping isn't unambiguous.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.ZoneIntervalAfterTransition">
      <summary>
            In a mapping where the original LocalDateTime value is skipped in the time zone,
            returns the time zone interval from after the daylight saving transition.
            </summary>
      <exception cref="T:System.InvalidOperationException">The mapping doesn't skip the original LocalDateTime.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.ZoneIntervalBeforeTransition">
      <summary>
            In a mapping where the original LocalDateTime value is skipped in the time zone,
            returns the time zone interval from before the daylight saving transition.
            </summary>
      <exception cref="T:System.InvalidOperationException">The mapping doesn't skip the original LocalDateTime.</exception>
    </member>
    <member name="T:NodaTime.TimeZones.ZoneLocalMapping.ResultType">
      <summary>
            The type of result represented by this mapping. The underlying integer value is the same
            as the number of ZonedDateTime values which map to the original LocalDateTime.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.ZoneLocalMapping.ResultType.Skipped">
      <summary>
            The original LocalDateTime was skipped in this time zone due to the clocks going
            forward at a daylight saving transition. Use the ZoneIntervalBeforeTransition and
            ZoneIntervalAfterTransition properties to find out more about the gap.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.ZoneLocalMapping.ResultType.Unambiguous">
      <summary>
            The original LocalDateTime was unambiguous. Use the UnambiguousMapping property
            to obtain the corresponding ZonedDateTime.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.ZoneLocalMapping.ResultType.Ambiguous">
      <summary>
            The original LocalDateTime was ambiguous due to the clocks going back at a daylight saving
            transition. Use the EarlierMapping and LaterMapping properties to obtain the corresponding
            ZonedDateTime values.
            </summary>
    </member>
    <member name="T:NodaTime.Utility.BclConversions">
      <summary>
            Conversion methods which don't naturally fit into any other types - for example, for
            enums which can't specify any other code. In most cases, conversions to and from BCL types
            are provided within the type itself - such as <see cref="M:NodaTime.LocalDateTime.ToDateTimeUnspecified" />
            and <see cref="M:NodaTime.LocalDateTime.FromDateTime(System.DateTime)" />.
            </summary>
    </member>
    <member name="M:NodaTime.Utility.BclConversions.ToDayOfWeek(NodaTime.IsoDayOfWeek)">
      <summary>
            Converts from the Noda Time <see cref="T:NodaTime.IsoDayOfWeek" /> enum to the equivalent BCL
            <see cref="T:System.DayOfWeek" /> value. Other than Sunday, the BCL and ISO values are the same -
            but ISO 8601 defines Sunday as day 7, and the BCL defines it as day 0.
            </summary>
      <param name="isoDayOfWeek">ISO day of week value to convert.</param>
      <returns>The ISO day of week value equivalent to the one passed in.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="isoDayOfWeek" /> parameter
            is not a valid day of the week.</exception>
    </member>
    <member name="M:NodaTime.Utility.BclConversions.ToIsoDayOfWeek(System.DayOfWeek)">
      <summary>
            Converts from the BCL <see cref="T:System.DayOfWeek" /> enum to the equivalent Noda Time <see cref="T:NodaTime.IsoDayOfWeek" /> value.
            Other than Sunday, the BCL and ISO values are the same - but ISO 8601 defines
            Sunday as day 7, and the BCL defines it as day 0.
            </summary>
      <param name="dayOfWeek">ISO day of week value to convert.</param>
      <returns>The BCL day of week value equivalent to the one passed in.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dayOfWeek" /> parameter
            is not a valid day of the week.</exception>
    </member>
  </members>
</doc>